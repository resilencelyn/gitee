// Code generated by gen-struct. DO NOT EDIT.
// make gen-protobuf generated

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_storage_proto protoreflect.FileDescriptor

var file_storage_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x68, 0x61, 0x73,
	0x68, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x65, 0x74, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0xf6, 0x0f, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x0b, 0x2e, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0b, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x0b,
	0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x12, 0x0e, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x42, 0x69, 0x74, 0x12, 0x0e,
	0x2e, 0x53, 0x65, 0x74, 0x42, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x53, 0x65, 0x74, 0x42, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x42, 0x69, 0x74, 0x12, 0x0e, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x4c, 0x65, 0x6e,
	0x12, 0x0e, 0x2e, 0x53, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x53, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x6e, 0x78, 0x12, 0x0d, 0x2e, 0x53, 0x65, 0x74,
	0x6e, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x53, 0x65, 0x74, 0x6e,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x4c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x0e, 0x2e, 0x4c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x4c, 0x65, 0x6e, 0x12, 0x0c, 0x2e, 0x4c,
	0x4c, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4c, 0x4c, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x50, 0x6f,
	0x70, 0x12, 0x0c, 0x2e, 0x4c, 0x50, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x4c, 0x50, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x05, 0x4c, 0x50, 0x75, 0x73, 0x68, 0x12, 0x0d, 0x2e, 0x4c, 0x50, 0x75, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x4c, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x4c, 0x50, 0x75, 0x73, 0x68, 0x58,
	0x12, 0x0e, 0x2e, 0x4c, 0x50, 0x75, 0x73, 0x68, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x4c, 0x50, 0x75, 0x73, 0x68, 0x58, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x4c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x2e, 0x4c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x4c, 0x52, 0x65, 0x6d, 0x12, 0x0c, 0x2e, 0x4c, 0x52, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4c, 0x52, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x53, 0x65, 0x74, 0x12, 0x0c, 0x2e, 0x4c, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4c, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x52, 0x50, 0x6f, 0x70, 0x12, 0x0c,
	0x2e, 0x52, 0x50, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x52,
	0x50, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x4c,
	0x54, 0x72, 0x69, 0x6d, 0x12, 0x0d, 0x2e, 0x4c, 0x54, 0x72, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x4c, 0x54, 0x72, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x52, 0x50, 0x75, 0x73, 0x68, 0x12, 0x0d, 0x2e, 0x52,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x52, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x52,
	0x50, 0x75, 0x73, 0x68, 0x58, 0x12, 0x0e, 0x2e, 0x52, 0x50, 0x75, 0x73, 0x68, 0x58, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x52, 0x50, 0x75, 0x73, 0x68, 0x58, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x48, 0x44, 0x65, 0x6c, 0x12, 0x0c,
	0x2e, 0x48, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x48,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x48,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x0f, 0x2e, 0x48, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x48, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x48, 0x47, 0x65,
	0x74, 0x12, 0x0c, 0x2e, 0x48, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x48, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x48, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x48, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x48, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07,
	0x48, 0x49, 0x6e, 0x63, 0x72, 0x42, 0x79, 0x12, 0x0f, 0x2e, 0x48, 0x49, 0x6e, 0x63, 0x72, 0x42,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x48, 0x49, 0x6e, 0x63, 0x72,
	0x42, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x48, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x0d, 0x2e, 0x48, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x48, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x48, 0x4c, 0x65, 0x6e, 0x12, 0x0c, 0x2e, 0x48, 0x4c, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x48, 0x4c, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x48, 0x53, 0x65, 0x74, 0x12,
	0x0c, 0x2e, 0x48, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x48, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05,
	0x48, 0x53, 0x65, 0x74, 0x58, 0x12, 0x0d, 0x2e, 0x48, 0x53, 0x65, 0x74, 0x58, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x48, 0x53, 0x65, 0x74, 0x58, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x53, 0x41, 0x64, 0x64, 0x12, 0x0c, 0x2e, 0x53,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x53, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x0d, 0x2e, 0x53, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x53, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x44, 0x69, 0x66, 0x66, 0x12, 0x0d, 0x2e, 0x53, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x53, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x53, 0x44, 0x69,
	0x66, 0x66, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x2e, 0x53, 0x44, 0x69, 0x66, 0x66, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x53, 0x44,
	0x69, 0x66, 0x66, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x53, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x53, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x53,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x53, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x53, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x11, 0x2e, 0x53, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x4d, 0x6f,
	0x76, 0x65, 0x12, 0x0d, 0x2e, 0x53, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x53, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x53, 0x50, 0x6f, 0x70, 0x12, 0x0c, 0x2e, 0x53, 0x50, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x53, 0x50, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x53, 0x52, 0x65, 0x6d, 0x12, 0x0c,
	0x2e, 0x53, 0x52, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x53,
	0x52, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x53,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x53, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x53, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x53, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x53, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x0d, 0x2e, 0x53, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x53, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x43, 0x50, 0x75, 0x73,
	0x68, 0x12, 0x0d, 0x2e, 0x43, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x43, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x43, 0x50, 0x6f, 0x70, 0x12, 0x0c, 0x2e, 0x43, 0x50, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x43, 0x50, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x43, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x0d,
	0x2e, 0x43, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x43, 0x4d, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x43, 0x4c, 0x65, 0x6e, 0x12, 0x0c, 0x2e, 0x43, 0x4c, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x43, 0x4c, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x43, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x0e, 0x2e, 0x43,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x43,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b, 0x5a,
	0x09, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_storage_proto_goTypes = []interface{}{
	(*SetRequest)(nil),          // 0: SetRequest
	(*GetRequest)(nil),          // 1: GetRequest
	(*AddRequest)(nil),          // 2: AddRequest
	(*ReduceRequest)(nil),       // 3: ReduceRequest
	(*SetBitRequest)(nil),       // 4: SetBitRequest
	(*GetBitRequest)(nil),       // 5: GetBitRequest
	(*GetRangeRequest)(nil),     // 6: GetRangeRequest
	(*GetSetRequest)(nil),       // 7: GetSetRequest
	(*StrLenRequest)(nil),       // 8: StrLenRequest
	(*SetnxRequest)(nil),        // 9: SetnxRequest
	(*LIndexRequest)(nil),       // 10: LIndexRequest
	(*LLenRequest)(nil),         // 11: LLenRequest
	(*LPopRequest)(nil),         // 12: LPopRequest
	(*LPushRequest)(nil),        // 13: LPushRequest
	(*LPushXRequest)(nil),       // 14: LPushXRequest
	(*LRangeRequest)(nil),       // 15: LRangeRequest
	(*LRemRequest)(nil),         // 16: LRemRequest
	(*LSetRequest)(nil),         // 17: LSetRequest
	(*RPopRequest)(nil),         // 18: RPopRequest
	(*LTrimRequest)(nil),        // 19: LTrimRequest
	(*RPushRequest)(nil),        // 20: RPushRequest
	(*RPushXRequest)(nil),       // 21: RPushXRequest
	(*HDelRequest)(nil),         // 22: HDelRequest
	(*HExistsRequest)(nil),      // 23: HExistsRequest
	(*HGetRequest)(nil),         // 24: HGetRequest
	(*HGetAllRequest)(nil),      // 25: HGetAllRequest
	(*HIncrByRequest)(nil),      // 26: HIncrByRequest
	(*HKeysRequest)(nil),        // 27: HKeysRequest
	(*HLenRequest)(nil),         // 28: HLenRequest
	(*HSetRequest)(nil),         // 29: HSetRequest
	(*HSetXRequest)(nil),        // 30: HSetXRequest
	(*SAddRequest)(nil),         // 31: SAddRequest
	(*SCardRequest)(nil),        // 32: SCardRequest
	(*SDiffRequest)(nil),        // 33: SDiffRequest
	(*SDiffStoreRequest)(nil),   // 34: SDiffStoreRequest
	(*SInterRequest)(nil),       // 35: SInterRequest
	(*SInterStoreRequest)(nil),  // 36: SInterStoreRequest
	(*SIsMemberRequest)(nil),    // 37: SIsMemberRequest
	(*SMoveRequest)(nil),        // 38: SMoveRequest
	(*SPopRequest)(nil),         // 39: SPopRequest
	(*SRemRequest)(nil),         // 40: SRemRequest
	(*SUnionRequest)(nil),       // 41: SUnionRequest
	(*SUnionStoreRequest)(nil),  // 42: SUnionStoreRequest
	(*SScanRequest)(nil),        // 43: SScanRequest
	(*CPushRequest)(nil),        // 44: CPushRequest
	(*CPopRequest)(nil),         // 45: CPopRequest
	(*CMakeRequest)(nil),        // 46: CMakeRequest
	(*CLenRequest)(nil),         // 47: CLenRequest
	(*CCleanRequest)(nil),       // 48: CCleanRequest
	(*SetResponse)(nil),         // 49: SetResponse
	(*GetResponse)(nil),         // 50: GetResponse
	(*AddResponse)(nil),         // 51: AddResponse
	(*ReduceResponse)(nil),      // 52: ReduceResponse
	(*SetBitResponse)(nil),      // 53: SetBitResponse
	(*GetBitResponse)(nil),      // 54: GetBitResponse
	(*GetRangeResponse)(nil),    // 55: GetRangeResponse
	(*GetSetResponse)(nil),      // 56: GetSetResponse
	(*StrLenResponse)(nil),      // 57: StrLenResponse
	(*SetnxResponse)(nil),       // 58: SetnxResponse
	(*LIndexResponse)(nil),      // 59: LIndexResponse
	(*LLenResponse)(nil),        // 60: LLenResponse
	(*LPopResponse)(nil),        // 61: LPopResponse
	(*LPushResponse)(nil),       // 62: LPushResponse
	(*LPushXResponse)(nil),      // 63: LPushXResponse
	(*LRangeResponse)(nil),      // 64: LRangeResponse
	(*LRemResponse)(nil),        // 65: LRemResponse
	(*LSetResponse)(nil),        // 66: LSetResponse
	(*RPopResponse)(nil),        // 67: RPopResponse
	(*LTrimResponse)(nil),       // 68: LTrimResponse
	(*RPushResponse)(nil),       // 69: RPushResponse
	(*RPushXResponse)(nil),      // 70: RPushXResponse
	(*HDelResponse)(nil),        // 71: HDelResponse
	(*HExistsResponse)(nil),     // 72: HExistsResponse
	(*HGetResponse)(nil),        // 73: HGetResponse
	(*HGetAllResponse)(nil),     // 74: HGetAllResponse
	(*HIncrByResponse)(nil),     // 75: HIncrByResponse
	(*HKeysResponse)(nil),       // 76: HKeysResponse
	(*HLenResponse)(nil),        // 77: HLenResponse
	(*HSetResponse)(nil),        // 78: HSetResponse
	(*HSetXResponse)(nil),       // 79: HSetXResponse
	(*SAddResponse)(nil),        // 80: SAddResponse
	(*SCardResponse)(nil),       // 81: SCardResponse
	(*SDiffResponse)(nil),       // 82: SDiffResponse
	(*SDiffStoreResponse)(nil),  // 83: SDiffStoreResponse
	(*SInterResponse)(nil),      // 84: SInterResponse
	(*SInterStoreResponse)(nil), // 85: SInterStoreResponse
	(*SIsMemberResponse)(nil),   // 86: SIsMemberResponse
	(*SMoveResponse)(nil),       // 87: SMoveResponse
	(*SPopResponse)(nil),        // 88: SPopResponse
	(*SRemResponse)(nil),        // 89: SRemResponse
	(*SUnionResponse)(nil),      // 90: SUnionResponse
	(*SUnionStoreResponse)(nil), // 91: SUnionStoreResponse
	(*SScanResponse)(nil),       // 92: SScanResponse
	(*CPushResponse)(nil),       // 93: CPushResponse
	(*CPopResponse)(nil),        // 94: CPopResponse
	(*CMakeResponse)(nil),       // 95: CMakeResponse
	(*CLenResponse)(nil),        // 96: CLenResponse
	(*CCleanResponse)(nil),      // 97: CCleanResponse
}
var file_storage_proto_depIdxs = []int32{
	0,  // 0: CommServer.Set:input_type -> SetRequest
	1,  // 1: CommServer.Get:input_type -> GetRequest
	2,  // 2: CommServer.Add:input_type -> AddRequest
	3,  // 3: CommServer.Reduce:input_type -> ReduceRequest
	4,  // 4: CommServer.SetBit:input_type -> SetBitRequest
	5,  // 5: CommServer.GetBit:input_type -> GetBitRequest
	6,  // 6: CommServer.GetRange:input_type -> GetRangeRequest
	7,  // 7: CommServer.GetSet:input_type -> GetSetRequest
	8,  // 8: CommServer.StrLen:input_type -> StrLenRequest
	9,  // 9: CommServer.Setnx:input_type -> SetnxRequest
	10, // 10: CommServer.LIndex:input_type -> LIndexRequest
	11, // 11: CommServer.LLen:input_type -> LLenRequest
	12, // 12: CommServer.LPop:input_type -> LPopRequest
	13, // 13: CommServer.LPush:input_type -> LPushRequest
	14, // 14: CommServer.LPushX:input_type -> LPushXRequest
	15, // 15: CommServer.LRange:input_type -> LRangeRequest
	16, // 16: CommServer.LRem:input_type -> LRemRequest
	17, // 17: CommServer.LSet:input_type -> LSetRequest
	18, // 18: CommServer.RPop:input_type -> RPopRequest
	19, // 19: CommServer.LTrim:input_type -> LTrimRequest
	20, // 20: CommServer.RPush:input_type -> RPushRequest
	21, // 21: CommServer.RPushX:input_type -> RPushXRequest
	22, // 22: CommServer.HDel:input_type -> HDelRequest
	23, // 23: CommServer.HExists:input_type -> HExistsRequest
	24, // 24: CommServer.HGet:input_type -> HGetRequest
	25, // 25: CommServer.HGetAll:input_type -> HGetAllRequest
	26, // 26: CommServer.HIncrBy:input_type -> HIncrByRequest
	27, // 27: CommServer.HKeys:input_type -> HKeysRequest
	28, // 28: CommServer.HLen:input_type -> HLenRequest
	29, // 29: CommServer.HSet:input_type -> HSetRequest
	30, // 30: CommServer.HSetX:input_type -> HSetXRequest
	31, // 31: CommServer.SAdd:input_type -> SAddRequest
	32, // 32: CommServer.SCard:input_type -> SCardRequest
	33, // 33: CommServer.SDiff:input_type -> SDiffRequest
	34, // 34: CommServer.SDiffStore:input_type -> SDiffStoreRequest
	35, // 35: CommServer.SInter:input_type -> SInterRequest
	36, // 36: CommServer.SInterStore:input_type -> SInterStoreRequest
	37, // 37: CommServer.SIsMember:input_type -> SIsMemberRequest
	38, // 38: CommServer.SMove:input_type -> SMoveRequest
	39, // 39: CommServer.SPop:input_type -> SPopRequest
	40, // 40: CommServer.SRem:input_type -> SRemRequest
	41, // 41: CommServer.SUnion:input_type -> SUnionRequest
	42, // 42: CommServer.SUnionStore:input_type -> SUnionStoreRequest
	43, // 43: CommServer.SScan:input_type -> SScanRequest
	44, // 44: CommServer.CPush:input_type -> CPushRequest
	45, // 45: CommServer.CPop:input_type -> CPopRequest
	46, // 46: CommServer.CMake:input_type -> CMakeRequest
	47, // 47: CommServer.CLen:input_type -> CLenRequest
	48, // 48: CommServer.CClean:input_type -> CCleanRequest
	49, // 49: CommServer.Set:output_type -> SetResponse
	50, // 50: CommServer.Get:output_type -> GetResponse
	51, // 51: CommServer.Add:output_type -> AddResponse
	52, // 52: CommServer.Reduce:output_type -> ReduceResponse
	53, // 53: CommServer.SetBit:output_type -> SetBitResponse
	54, // 54: CommServer.GetBit:output_type -> GetBitResponse
	55, // 55: CommServer.GetRange:output_type -> GetRangeResponse
	56, // 56: CommServer.GetSet:output_type -> GetSetResponse
	57, // 57: CommServer.StrLen:output_type -> StrLenResponse
	58, // 58: CommServer.Setnx:output_type -> SetnxResponse
	59, // 59: CommServer.LIndex:output_type -> LIndexResponse
	60, // 60: CommServer.LLen:output_type -> LLenResponse
	61, // 61: CommServer.LPop:output_type -> LPopResponse
	62, // 62: CommServer.LPush:output_type -> LPushResponse
	63, // 63: CommServer.LPushX:output_type -> LPushXResponse
	64, // 64: CommServer.LRange:output_type -> LRangeResponse
	65, // 65: CommServer.LRem:output_type -> LRemResponse
	66, // 66: CommServer.LSet:output_type -> LSetResponse
	67, // 67: CommServer.RPop:output_type -> RPopResponse
	68, // 68: CommServer.LTrim:output_type -> LTrimResponse
	69, // 69: CommServer.RPush:output_type -> RPushResponse
	70, // 70: CommServer.RPushX:output_type -> RPushXResponse
	71, // 71: CommServer.HDel:output_type -> HDelResponse
	72, // 72: CommServer.HExists:output_type -> HExistsResponse
	73, // 73: CommServer.HGet:output_type -> HGetResponse
	74, // 74: CommServer.HGetAll:output_type -> HGetAllResponse
	75, // 75: CommServer.HIncrBy:output_type -> HIncrByResponse
	76, // 76: CommServer.HKeys:output_type -> HKeysResponse
	77, // 77: CommServer.HLen:output_type -> HLenResponse
	78, // 78: CommServer.HSet:output_type -> HSetResponse
	79, // 79: CommServer.HSetX:output_type -> HSetXResponse
	80, // 80: CommServer.SAdd:output_type -> SAddResponse
	81, // 81: CommServer.SCard:output_type -> SCardResponse
	82, // 82: CommServer.SDiff:output_type -> SDiffResponse
	83, // 83: CommServer.SDiffStore:output_type -> SDiffStoreResponse
	84, // 84: CommServer.SInter:output_type -> SInterResponse
	85, // 85: CommServer.SInterStore:output_type -> SInterStoreResponse
	86, // 86: CommServer.SIsMember:output_type -> SIsMemberResponse
	87, // 87: CommServer.SMove:output_type -> SMoveResponse
	88, // 88: CommServer.SPop:output_type -> SPopResponse
	89, // 89: CommServer.SRem:output_type -> SRemResponse
	90, // 90: CommServer.SUnion:output_type -> SUnionResponse
	91, // 91: CommServer.SUnionStore:output_type -> SUnionStoreResponse
	92, // 92: CommServer.SScan:output_type -> SScanResponse
	93, // 93: CommServer.CPush:output_type -> CPushResponse
	94, // 94: CommServer.CPop:output_type -> CPopResponse
	95, // 95: CommServer.CMake:output_type -> CMakeResponse
	96, // 96: CommServer.CLen:output_type -> CLenResponse
	97, // 97: CommServer.CClean:output_type -> CCleanResponse
	49, // [49:98] is the sub-list for method output_type
	0,  // [0:49] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_storage_proto_init() }
func file_storage_proto_init() {
	if File_storage_proto != nil {
		return
	}
	file_stringx_proto_init()
	file_listx_proto_init()
	file_hashx_proto_init()
	file_setx_proto_init()
	file_channelx_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storage_proto_goTypes,
		DependencyIndexes: file_storage_proto_depIdxs,
	}.Build()
	File_storage_proto = out.File
	file_storage_proto_rawDesc = nil
	file_storage_proto_goTypes = nil
	file_storage_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommServerClient is the client API for CommServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommServerClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Reduce(ctx context.Context, in *ReduceRequest, opts ...grpc.CallOption) (*ReduceResponse, error)
	SetBit(ctx context.Context, in *SetBitRequest, opts ...grpc.CallOption) (*SetBitResponse, error)
	GetBit(ctx context.Context, in *GetBitRequest, opts ...grpc.CallOption) (*GetBitResponse, error)
	GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error)
	GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error)
	StrLen(ctx context.Context, in *StrLenRequest, opts ...grpc.CallOption) (*StrLenResponse, error)
	Setnx(ctx context.Context, in *SetnxRequest, opts ...grpc.CallOption) (*SetnxResponse, error)
	LIndex(ctx context.Context, in *LIndexRequest, opts ...grpc.CallOption) (*LIndexResponse, error)
	LLen(ctx context.Context, in *LLenRequest, opts ...grpc.CallOption) (*LLenResponse, error)
	LPop(ctx context.Context, in *LPopRequest, opts ...grpc.CallOption) (*LPopResponse, error)
	LPush(ctx context.Context, in *LPushRequest, opts ...grpc.CallOption) (*LPushResponse, error)
	LPushX(ctx context.Context, in *LPushXRequest, opts ...grpc.CallOption) (*LPushXResponse, error)
	LRange(ctx context.Context, in *LRangeRequest, opts ...grpc.CallOption) (*LRangeResponse, error)
	LRem(ctx context.Context, in *LRemRequest, opts ...grpc.CallOption) (*LRemResponse, error)
	LSet(ctx context.Context, in *LSetRequest, opts ...grpc.CallOption) (*LSetResponse, error)
	RPop(ctx context.Context, in *RPopRequest, opts ...grpc.CallOption) (*RPopResponse, error)
	LTrim(ctx context.Context, in *LTrimRequest, opts ...grpc.CallOption) (*LTrimResponse, error)
	RPush(ctx context.Context, in *RPushRequest, opts ...grpc.CallOption) (*RPushResponse, error)
	RPushX(ctx context.Context, in *RPushXRequest, opts ...grpc.CallOption) (*RPushXResponse, error)
	HDel(ctx context.Context, in *HDelRequest, opts ...grpc.CallOption) (*HDelResponse, error)
	HExists(ctx context.Context, in *HExistsRequest, opts ...grpc.CallOption) (*HExistsResponse, error)
	HGet(ctx context.Context, in *HGetRequest, opts ...grpc.CallOption) (*HGetResponse, error)
	HGetAll(ctx context.Context, in *HGetAllRequest, opts ...grpc.CallOption) (*HGetAllResponse, error)
	HIncrBy(ctx context.Context, in *HIncrByRequest, opts ...grpc.CallOption) (*HIncrByResponse, error)
	HKeys(ctx context.Context, in *HKeysRequest, opts ...grpc.CallOption) (*HKeysResponse, error)
	HLen(ctx context.Context, in *HLenRequest, opts ...grpc.CallOption) (*HLenResponse, error)
	HSet(ctx context.Context, in *HSetRequest, opts ...grpc.CallOption) (*HSetResponse, error)
	HSetX(ctx context.Context, in *HSetXRequest, opts ...grpc.CallOption) (*HSetXResponse, error)
	SAdd(ctx context.Context, in *SAddRequest, opts ...grpc.CallOption) (*SAddResponse, error)
	SCard(ctx context.Context, in *SCardRequest, opts ...grpc.CallOption) (*SCardResponse, error)
	SDiff(ctx context.Context, in *SDiffRequest, opts ...grpc.CallOption) (*SDiffResponse, error)
	SDiffStore(ctx context.Context, in *SDiffStoreRequest, opts ...grpc.CallOption) (*SDiffStoreResponse, error)
	SInter(ctx context.Context, in *SInterRequest, opts ...grpc.CallOption) (*SInterResponse, error)
	SInterStore(ctx context.Context, in *SInterStoreRequest, opts ...grpc.CallOption) (*SInterStoreResponse, error)
	SIsMember(ctx context.Context, in *SIsMemberRequest, opts ...grpc.CallOption) (*SIsMemberResponse, error)
	SMove(ctx context.Context, in *SMoveRequest, opts ...grpc.CallOption) (*SMoveResponse, error)
	SPop(ctx context.Context, in *SPopRequest, opts ...grpc.CallOption) (*SPopResponse, error)
	SRem(ctx context.Context, in *SRemRequest, opts ...grpc.CallOption) (*SRemResponse, error)
	SUnion(ctx context.Context, in *SUnionRequest, opts ...grpc.CallOption) (*SUnionResponse, error)
	SUnionStore(ctx context.Context, in *SUnionStoreRequest, opts ...grpc.CallOption) (*SUnionStoreResponse, error)
	SScan(ctx context.Context, in *SScanRequest, opts ...grpc.CallOption) (*SScanResponse, error)
	CPush(ctx context.Context, in *CPushRequest, opts ...grpc.CallOption) (*CPushResponse, error)
	CPop(ctx context.Context, in *CPopRequest, opts ...grpc.CallOption) (*CPopResponse, error)
	CMake(ctx context.Context, in *CMakeRequest, opts ...grpc.CallOption) (*CMakeResponse, error)
	CLen(ctx context.Context, in *CLenRequest, opts ...grpc.CallOption) (*CLenResponse, error)
	CClean(ctx context.Context, in *CCleanRequest, opts ...grpc.CallOption) (*CCleanResponse, error)
}

type commServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCommServerClient(cc grpc.ClientConnInterface) CommServerClient {
	return &commServerClient{cc}
}

func (c *commServerClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/CommServer/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/CommServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/CommServer/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) Reduce(ctx context.Context, in *ReduceRequest, opts ...grpc.CallOption) (*ReduceResponse, error) {
	out := new(ReduceResponse)
	err := c.cc.Invoke(ctx, "/CommServer/Reduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SetBit(ctx context.Context, in *SetBitRequest, opts ...grpc.CallOption) (*SetBitResponse, error) {
	out := new(SetBitResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SetBit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) GetBit(ctx context.Context, in *GetBitRequest, opts ...grpc.CallOption) (*GetBitResponse, error) {
	out := new(GetBitResponse)
	err := c.cc.Invoke(ctx, "/CommServer/GetBit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error) {
	out := new(GetRangeResponse)
	err := c.cc.Invoke(ctx, "/CommServer/GetRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error) {
	out := new(GetSetResponse)
	err := c.cc.Invoke(ctx, "/CommServer/GetSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) StrLen(ctx context.Context, in *StrLenRequest, opts ...grpc.CallOption) (*StrLenResponse, error) {
	out := new(StrLenResponse)
	err := c.cc.Invoke(ctx, "/CommServer/StrLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) Setnx(ctx context.Context, in *SetnxRequest, opts ...grpc.CallOption) (*SetnxResponse, error) {
	out := new(SetnxResponse)
	err := c.cc.Invoke(ctx, "/CommServer/Setnx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LIndex(ctx context.Context, in *LIndexRequest, opts ...grpc.CallOption) (*LIndexResponse, error) {
	out := new(LIndexResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LLen(ctx context.Context, in *LLenRequest, opts ...grpc.CallOption) (*LLenResponse, error) {
	out := new(LLenResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LPop(ctx context.Context, in *LPopRequest, opts ...grpc.CallOption) (*LPopResponse, error) {
	out := new(LPopResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LPush(ctx context.Context, in *LPushRequest, opts ...grpc.CallOption) (*LPushResponse, error) {
	out := new(LPushResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LPushX(ctx context.Context, in *LPushXRequest, opts ...grpc.CallOption) (*LPushXResponse, error) {
	out := new(LPushXResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LPushX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LRange(ctx context.Context, in *LRangeRequest, opts ...grpc.CallOption) (*LRangeResponse, error) {
	out := new(LRangeResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LRem(ctx context.Context, in *LRemRequest, opts ...grpc.CallOption) (*LRemResponse, error) {
	out := new(LRemResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LRem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LSet(ctx context.Context, in *LSetRequest, opts ...grpc.CallOption) (*LSetResponse, error) {
	out := new(LSetResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) RPop(ctx context.Context, in *RPopRequest, opts ...grpc.CallOption) (*RPopResponse, error) {
	out := new(RPopResponse)
	err := c.cc.Invoke(ctx, "/CommServer/RPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) LTrim(ctx context.Context, in *LTrimRequest, opts ...grpc.CallOption) (*LTrimResponse, error) {
	out := new(LTrimResponse)
	err := c.cc.Invoke(ctx, "/CommServer/LTrim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) RPush(ctx context.Context, in *RPushRequest, opts ...grpc.CallOption) (*RPushResponse, error) {
	out := new(RPushResponse)
	err := c.cc.Invoke(ctx, "/CommServer/RPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) RPushX(ctx context.Context, in *RPushXRequest, opts ...grpc.CallOption) (*RPushXResponse, error) {
	out := new(RPushXResponse)
	err := c.cc.Invoke(ctx, "/CommServer/RPushX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HDel(ctx context.Context, in *HDelRequest, opts ...grpc.CallOption) (*HDelResponse, error) {
	out := new(HDelResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HExists(ctx context.Context, in *HExistsRequest, opts ...grpc.CallOption) (*HExistsResponse, error) {
	out := new(HExistsResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HGet(ctx context.Context, in *HGetRequest, opts ...grpc.CallOption) (*HGetResponse, error) {
	out := new(HGetResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HGetAll(ctx context.Context, in *HGetAllRequest, opts ...grpc.CallOption) (*HGetAllResponse, error) {
	out := new(HGetAllResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HIncrBy(ctx context.Context, in *HIncrByRequest, opts ...grpc.CallOption) (*HIncrByResponse, error) {
	out := new(HIncrByResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HIncrBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HKeys(ctx context.Context, in *HKeysRequest, opts ...grpc.CallOption) (*HKeysResponse, error) {
	out := new(HKeysResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HLen(ctx context.Context, in *HLenRequest, opts ...grpc.CallOption) (*HLenResponse, error) {
	out := new(HLenResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HSet(ctx context.Context, in *HSetRequest, opts ...grpc.CallOption) (*HSetResponse, error) {
	out := new(HSetResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) HSetX(ctx context.Context, in *HSetXRequest, opts ...grpc.CallOption) (*HSetXResponse, error) {
	out := new(HSetXResponse)
	err := c.cc.Invoke(ctx, "/CommServer/HSetX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SAdd(ctx context.Context, in *SAddRequest, opts ...grpc.CallOption) (*SAddResponse, error) {
	out := new(SAddResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SCard(ctx context.Context, in *SCardRequest, opts ...grpc.CallOption) (*SCardResponse, error) {
	out := new(SCardResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SDiff(ctx context.Context, in *SDiffRequest, opts ...grpc.CallOption) (*SDiffResponse, error) {
	out := new(SDiffResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SDiffStore(ctx context.Context, in *SDiffStoreRequest, opts ...grpc.CallOption) (*SDiffStoreResponse, error) {
	out := new(SDiffStoreResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SDiffStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SInter(ctx context.Context, in *SInterRequest, opts ...grpc.CallOption) (*SInterResponse, error) {
	out := new(SInterResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SInter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SInterStore(ctx context.Context, in *SInterStoreRequest, opts ...grpc.CallOption) (*SInterStoreResponse, error) {
	out := new(SInterStoreResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SInterStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SIsMember(ctx context.Context, in *SIsMemberRequest, opts ...grpc.CallOption) (*SIsMemberResponse, error) {
	out := new(SIsMemberResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SIsMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SMove(ctx context.Context, in *SMoveRequest, opts ...grpc.CallOption) (*SMoveResponse, error) {
	out := new(SMoveResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SPop(ctx context.Context, in *SPopRequest, opts ...grpc.CallOption) (*SPopResponse, error) {
	out := new(SPopResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SRem(ctx context.Context, in *SRemRequest, opts ...grpc.CallOption) (*SRemResponse, error) {
	out := new(SRemResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SRem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SUnion(ctx context.Context, in *SUnionRequest, opts ...grpc.CallOption) (*SUnionResponse, error) {
	out := new(SUnionResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SUnion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SUnionStore(ctx context.Context, in *SUnionStoreRequest, opts ...grpc.CallOption) (*SUnionStoreResponse, error) {
	out := new(SUnionStoreResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SUnionStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) SScan(ctx context.Context, in *SScanRequest, opts ...grpc.CallOption) (*SScanResponse, error) {
	out := new(SScanResponse)
	err := c.cc.Invoke(ctx, "/CommServer/SScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) CPush(ctx context.Context, in *CPushRequest, opts ...grpc.CallOption) (*CPushResponse, error) {
	out := new(CPushResponse)
	err := c.cc.Invoke(ctx, "/CommServer/CPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) CPop(ctx context.Context, in *CPopRequest, opts ...grpc.CallOption) (*CPopResponse, error) {
	out := new(CPopResponse)
	err := c.cc.Invoke(ctx, "/CommServer/CPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) CMake(ctx context.Context, in *CMakeRequest, opts ...grpc.CallOption) (*CMakeResponse, error) {
	out := new(CMakeResponse)
	err := c.cc.Invoke(ctx, "/CommServer/CMake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) CLen(ctx context.Context, in *CLenRequest, opts ...grpc.CallOption) (*CLenResponse, error) {
	out := new(CLenResponse)
	err := c.cc.Invoke(ctx, "/CommServer/CLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commServerClient) CClean(ctx context.Context, in *CCleanRequest, opts ...grpc.CallOption) (*CCleanResponse, error) {
	out := new(CCleanResponse)
	err := c.cc.Invoke(ctx, "/CommServer/CClean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommServerServer is the server API for CommServer service.
type CommServerServer interface {
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Reduce(context.Context, *ReduceRequest) (*ReduceResponse, error)
	SetBit(context.Context, *SetBitRequest) (*SetBitResponse, error)
	GetBit(context.Context, *GetBitRequest) (*GetBitResponse, error)
	GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error)
	GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error)
	StrLen(context.Context, *StrLenRequest) (*StrLenResponse, error)
	Setnx(context.Context, *SetnxRequest) (*SetnxResponse, error)
	LIndex(context.Context, *LIndexRequest) (*LIndexResponse, error)
	LLen(context.Context, *LLenRequest) (*LLenResponse, error)
	LPop(context.Context, *LPopRequest) (*LPopResponse, error)
	LPush(context.Context, *LPushRequest) (*LPushResponse, error)
	LPushX(context.Context, *LPushXRequest) (*LPushXResponse, error)
	LRange(context.Context, *LRangeRequest) (*LRangeResponse, error)
	LRem(context.Context, *LRemRequest) (*LRemResponse, error)
	LSet(context.Context, *LSetRequest) (*LSetResponse, error)
	RPop(context.Context, *RPopRequest) (*RPopResponse, error)
	LTrim(context.Context, *LTrimRequest) (*LTrimResponse, error)
	RPush(context.Context, *RPushRequest) (*RPushResponse, error)
	RPushX(context.Context, *RPushXRequest) (*RPushXResponse, error)
	HDel(context.Context, *HDelRequest) (*HDelResponse, error)
	HExists(context.Context, *HExistsRequest) (*HExistsResponse, error)
	HGet(context.Context, *HGetRequest) (*HGetResponse, error)
	HGetAll(context.Context, *HGetAllRequest) (*HGetAllResponse, error)
	HIncrBy(context.Context, *HIncrByRequest) (*HIncrByResponse, error)
	HKeys(context.Context, *HKeysRequest) (*HKeysResponse, error)
	HLen(context.Context, *HLenRequest) (*HLenResponse, error)
	HSet(context.Context, *HSetRequest) (*HSetResponse, error)
	HSetX(context.Context, *HSetXRequest) (*HSetXResponse, error)
	SAdd(context.Context, *SAddRequest) (*SAddResponse, error)
	SCard(context.Context, *SCardRequest) (*SCardResponse, error)
	SDiff(context.Context, *SDiffRequest) (*SDiffResponse, error)
	SDiffStore(context.Context, *SDiffStoreRequest) (*SDiffStoreResponse, error)
	SInter(context.Context, *SInterRequest) (*SInterResponse, error)
	SInterStore(context.Context, *SInterStoreRequest) (*SInterStoreResponse, error)
	SIsMember(context.Context, *SIsMemberRequest) (*SIsMemberResponse, error)
	SMove(context.Context, *SMoveRequest) (*SMoveResponse, error)
	SPop(context.Context, *SPopRequest) (*SPopResponse, error)
	SRem(context.Context, *SRemRequest) (*SRemResponse, error)
	SUnion(context.Context, *SUnionRequest) (*SUnionResponse, error)
	SUnionStore(context.Context, *SUnionStoreRequest) (*SUnionStoreResponse, error)
	SScan(context.Context, *SScanRequest) (*SScanResponse, error)
	CPush(context.Context, *CPushRequest) (*CPushResponse, error)
	CPop(context.Context, *CPopRequest) (*CPopResponse, error)
	CMake(context.Context, *CMakeRequest) (*CMakeResponse, error)
	CLen(context.Context, *CLenRequest) (*CLenResponse, error)
	CClean(context.Context, *CCleanRequest) (*CCleanResponse, error)
}

// UnimplementedCommServerServer can be embedded to have forward compatible implementations.
type UnimplementedCommServerServer struct {
}

func (*UnimplementedCommServerServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedCommServerServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCommServerServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCommServerServer) Reduce(context.Context, *ReduceRequest) (*ReduceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reduce not implemented")
}
func (*UnimplementedCommServerServer) SetBit(context.Context, *SetBitRequest) (*SetBitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBit not implemented")
}
func (*UnimplementedCommServerServer) GetBit(context.Context, *GetBitRequest) (*GetBitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBit not implemented")
}
func (*UnimplementedCommServerServer) GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (*UnimplementedCommServerServer) GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}
func (*UnimplementedCommServerServer) StrLen(context.Context, *StrLenRequest) (*StrLenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrLen not implemented")
}
func (*UnimplementedCommServerServer) Setnx(context.Context, *SetnxRequest) (*SetnxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setnx not implemented")
}
func (*UnimplementedCommServerServer) LIndex(context.Context, *LIndexRequest) (*LIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIndex not implemented")
}
func (*UnimplementedCommServerServer) LLen(context.Context, *LLenRequest) (*LLenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LLen not implemented")
}
func (*UnimplementedCommServerServer) LPop(context.Context, *LPopRequest) (*LPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPop not implemented")
}
func (*UnimplementedCommServerServer) LPush(context.Context, *LPushRequest) (*LPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPush not implemented")
}
func (*UnimplementedCommServerServer) LPushX(context.Context, *LPushXRequest) (*LPushXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPushX not implemented")
}
func (*UnimplementedCommServerServer) LRange(context.Context, *LRangeRequest) (*LRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LRange not implemented")
}
func (*UnimplementedCommServerServer) LRem(context.Context, *LRemRequest) (*LRemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LRem not implemented")
}
func (*UnimplementedCommServerServer) LSet(context.Context, *LSetRequest) (*LSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSet not implemented")
}
func (*UnimplementedCommServerServer) RPop(context.Context, *RPopRequest) (*RPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPop not implemented")
}
func (*UnimplementedCommServerServer) LTrim(context.Context, *LTrimRequest) (*LTrimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LTrim not implemented")
}
func (*UnimplementedCommServerServer) RPush(context.Context, *RPushRequest) (*RPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPush not implemented")
}
func (*UnimplementedCommServerServer) RPushX(context.Context, *RPushXRequest) (*RPushXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPushX not implemented")
}
func (*UnimplementedCommServerServer) HDel(context.Context, *HDelRequest) (*HDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HDel not implemented")
}
func (*UnimplementedCommServerServer) HExists(context.Context, *HExistsRequest) (*HExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HExists not implemented")
}
func (*UnimplementedCommServerServer) HGet(context.Context, *HGetRequest) (*HGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGet not implemented")
}
func (*UnimplementedCommServerServer) HGetAll(context.Context, *HGetAllRequest) (*HGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGetAll not implemented")
}
func (*UnimplementedCommServerServer) HIncrBy(context.Context, *HIncrByRequest) (*HIncrByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HIncrBy not implemented")
}
func (*UnimplementedCommServerServer) HKeys(context.Context, *HKeysRequest) (*HKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HKeys not implemented")
}
func (*UnimplementedCommServerServer) HLen(context.Context, *HLenRequest) (*HLenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HLen not implemented")
}
func (*UnimplementedCommServerServer) HSet(context.Context, *HSetRequest) (*HSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HSet not implemented")
}
func (*UnimplementedCommServerServer) HSetX(context.Context, *HSetXRequest) (*HSetXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HSetX not implemented")
}
func (*UnimplementedCommServerServer) SAdd(context.Context, *SAddRequest) (*SAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SAdd not implemented")
}
func (*UnimplementedCommServerServer) SCard(context.Context, *SCardRequest) (*SCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SCard not implemented")
}
func (*UnimplementedCommServerServer) SDiff(context.Context, *SDiffRequest) (*SDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDiff not implemented")
}
func (*UnimplementedCommServerServer) SDiffStore(context.Context, *SDiffStoreRequest) (*SDiffStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDiffStore not implemented")
}
func (*UnimplementedCommServerServer) SInter(context.Context, *SInterRequest) (*SInterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SInter not implemented")
}
func (*UnimplementedCommServerServer) SInterStore(context.Context, *SInterStoreRequest) (*SInterStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SInterStore not implemented")
}
func (*UnimplementedCommServerServer) SIsMember(context.Context, *SIsMemberRequest) (*SIsMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SIsMember not implemented")
}
func (*UnimplementedCommServerServer) SMove(context.Context, *SMoveRequest) (*SMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMove not implemented")
}
func (*UnimplementedCommServerServer) SPop(context.Context, *SPopRequest) (*SPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPop not implemented")
}
func (*UnimplementedCommServerServer) SRem(context.Context, *SRemRequest) (*SRemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SRem not implemented")
}
func (*UnimplementedCommServerServer) SUnion(context.Context, *SUnionRequest) (*SUnionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SUnion not implemented")
}
func (*UnimplementedCommServerServer) SUnionStore(context.Context, *SUnionStoreRequest) (*SUnionStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SUnionStore not implemented")
}
func (*UnimplementedCommServerServer) SScan(context.Context, *SScanRequest) (*SScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SScan not implemented")
}
func (*UnimplementedCommServerServer) CPush(context.Context, *CPushRequest) (*CPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPush not implemented")
}
func (*UnimplementedCommServerServer) CPop(context.Context, *CPopRequest) (*CPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPop not implemented")
}
func (*UnimplementedCommServerServer) CMake(context.Context, *CMakeRequest) (*CMakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CMake not implemented")
}
func (*UnimplementedCommServerServer) CLen(context.Context, *CLenRequest) (*CLenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CLen not implemented")
}
func (*UnimplementedCommServerServer) CClean(context.Context, *CCleanRequest) (*CCleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CClean not implemented")
}

func RegisterCommServerServer(s *grpc.Server, srv CommServerServer) {
	s.RegisterService(&_CommServer_serviceDesc, srv)
}

func _CommServer_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_Reduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).Reduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/Reduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).Reduce(ctx, req.(*ReduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SetBit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SetBit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SetBit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SetBit(ctx, req.(*SetBitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_GetBit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).GetBit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/GetBit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).GetBit(ctx, req.(*GetBitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_GetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).GetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/GetRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).GetRange(ctx, req.(*GetRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/GetSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).GetSet(ctx, req.(*GetSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_StrLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrLenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).StrLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/StrLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).StrLen(ctx, req.(*StrLenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_Setnx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetnxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).Setnx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/Setnx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).Setnx(ctx, req.(*SetnxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LIndex(ctx, req.(*LIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LLen(ctx, req.(*LLenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LPop(ctx, req.(*LPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LPush(ctx, req.(*LPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LPushX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPushXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LPushX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LPushX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LPushX(ctx, req.(*LPushXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LRange(ctx, req.(*LRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LRem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LRemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LRem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LRem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LRem(ctx, req.(*LRemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LSet(ctx, req.(*LSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_RPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).RPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/RPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).RPop(ctx, req.(*RPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_LTrim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LTrimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).LTrim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/LTrim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).LTrim(ctx, req.(*LTrimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_RPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).RPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/RPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).RPush(ctx, req.(*RPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_RPushX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPushXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).RPushX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/RPushX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).RPushX(ctx, req.(*RPushXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HDel(ctx, req.(*HDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HExists(ctx, req.(*HExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HGet(ctx, req.(*HGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HGetAll(ctx, req.(*HGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HIncrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIncrByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HIncrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HIncrBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HIncrBy(ctx, req.(*HIncrByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HKeys(ctx, req.(*HKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HLenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HLen(ctx, req.(*HLenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HSet(ctx, req.(*HSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_HSetX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSetXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).HSetX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/HSetX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).HSetX(ctx, req.(*HSetXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SAdd(ctx, req.(*SAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SCard(ctx, req.(*SCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SDiff(ctx, req.(*SDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SDiffStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDiffStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SDiffStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SDiffStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SDiffStore(ctx, req.(*SDiffStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SInter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SInterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SInter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SInter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SInter(ctx, req.(*SInterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SInterStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SInterStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SInterStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SInterStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SInterStore(ctx, req.(*SInterStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SIsMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SIsMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SIsMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SIsMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SIsMember(ctx, req.(*SIsMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SMove(ctx, req.(*SMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SPop(ctx, req.(*SPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SRem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SRemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SRem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SRem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SRem(ctx, req.(*SRemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SUnion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SUnionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SUnion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SUnion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SUnion(ctx, req.(*SUnionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SUnionStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SUnionStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SUnionStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SUnionStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SUnionStore(ctx, req.(*SUnionStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_SScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).SScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/SScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).SScan(ctx, req.(*SScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_CPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).CPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/CPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).CPush(ctx, req.(*CPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_CPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).CPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/CPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).CPop(ctx, req.(*CPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_CMake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).CMake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/CMake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).CMake(ctx, req.(*CMakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_CLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).CLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/CLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).CLen(ctx, req.(*CLenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommServer_CClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServerServer).CClean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommServer/CClean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServerServer).CClean(ctx, req.(*CCleanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CommServer",
	HandlerType: (*CommServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _CommServer_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CommServer_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _CommServer_Add_Handler,
		},
		{
			MethodName: "Reduce",
			Handler:    _CommServer_Reduce_Handler,
		},
		{
			MethodName: "SetBit",
			Handler:    _CommServer_SetBit_Handler,
		},
		{
			MethodName: "GetBit",
			Handler:    _CommServer_GetBit_Handler,
		},
		{
			MethodName: "GetRange",
			Handler:    _CommServer_GetRange_Handler,
		},
		{
			MethodName: "GetSet",
			Handler:    _CommServer_GetSet_Handler,
		},
		{
			MethodName: "StrLen",
			Handler:    _CommServer_StrLen_Handler,
		},
		{
			MethodName: "Setnx",
			Handler:    _CommServer_Setnx_Handler,
		},
		{
			MethodName: "LIndex",
			Handler:    _CommServer_LIndex_Handler,
		},
		{
			MethodName: "LLen",
			Handler:    _CommServer_LLen_Handler,
		},
		{
			MethodName: "LPop",
			Handler:    _CommServer_LPop_Handler,
		},
		{
			MethodName: "LPush",
			Handler:    _CommServer_LPush_Handler,
		},
		{
			MethodName: "LPushX",
			Handler:    _CommServer_LPushX_Handler,
		},
		{
			MethodName: "LRange",
			Handler:    _CommServer_LRange_Handler,
		},
		{
			MethodName: "LRem",
			Handler:    _CommServer_LRem_Handler,
		},
		{
			MethodName: "LSet",
			Handler:    _CommServer_LSet_Handler,
		},
		{
			MethodName: "RPop",
			Handler:    _CommServer_RPop_Handler,
		},
		{
			MethodName: "LTrim",
			Handler:    _CommServer_LTrim_Handler,
		},
		{
			MethodName: "RPush",
			Handler:    _CommServer_RPush_Handler,
		},
		{
			MethodName: "RPushX",
			Handler:    _CommServer_RPushX_Handler,
		},
		{
			MethodName: "HDel",
			Handler:    _CommServer_HDel_Handler,
		},
		{
			MethodName: "HExists",
			Handler:    _CommServer_HExists_Handler,
		},
		{
			MethodName: "HGet",
			Handler:    _CommServer_HGet_Handler,
		},
		{
			MethodName: "HGetAll",
			Handler:    _CommServer_HGetAll_Handler,
		},
		{
			MethodName: "HIncrBy",
			Handler:    _CommServer_HIncrBy_Handler,
		},
		{
			MethodName: "HKeys",
			Handler:    _CommServer_HKeys_Handler,
		},
		{
			MethodName: "HLen",
			Handler:    _CommServer_HLen_Handler,
		},
		{
			MethodName: "HSet",
			Handler:    _CommServer_HSet_Handler,
		},
		{
			MethodName: "HSetX",
			Handler:    _CommServer_HSetX_Handler,
		},
		{
			MethodName: "SAdd",
			Handler:    _CommServer_SAdd_Handler,
		},
		{
			MethodName: "SCard",
			Handler:    _CommServer_SCard_Handler,
		},
		{
			MethodName: "SDiff",
			Handler:    _CommServer_SDiff_Handler,
		},
		{
			MethodName: "SDiffStore",
			Handler:    _CommServer_SDiffStore_Handler,
		},
		{
			MethodName: "SInter",
			Handler:    _CommServer_SInter_Handler,
		},
		{
			MethodName: "SInterStore",
			Handler:    _CommServer_SInterStore_Handler,
		},
		{
			MethodName: "SIsMember",
			Handler:    _CommServer_SIsMember_Handler,
		},
		{
			MethodName: "SMove",
			Handler:    _CommServer_SMove_Handler,
		},
		{
			MethodName: "SPop",
			Handler:    _CommServer_SPop_Handler,
		},
		{
			MethodName: "SRem",
			Handler:    _CommServer_SRem_Handler,
		},
		{
			MethodName: "SUnion",
			Handler:    _CommServer_SUnion_Handler,
		},
		{
			MethodName: "SUnionStore",
			Handler:    _CommServer_SUnionStore_Handler,
		},
		{
			MethodName: "SScan",
			Handler:    _CommServer_SScan_Handler,
		},
		{
			MethodName: "CPush",
			Handler:    _CommServer_CPush_Handler,
		},
		{
			MethodName: "CPop",
			Handler:    _CommServer_CPop_Handler,
		},
		{
			MethodName: "CMake",
			Handler:    _CommServer_CMake_Handler,
		},
		{
			MethodName: "CLen",
			Handler:    _CommServer_CLen_Handler,
		},
		{
			MethodName: "CClean",
			Handler:    _CommServer_CClean_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
