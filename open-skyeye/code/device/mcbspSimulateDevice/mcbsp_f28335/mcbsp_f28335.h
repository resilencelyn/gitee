/* Copyright (C)
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
* 
*/
/**
* @file mcbsp_f28335.h
* @brief The definition of system controller 
* @author liubo@digiproto.com
* @version 00.00
*/

/* Autogenerated by SkyEye script */
#ifndef __mcbsp_f28335_H__
#define __mcbsp_f28335_H__
/* *
 * Mcbsp A Address : 0x5000 
 * Mcbsp B Address : 0x5040 
 * */

typedef struct {
	uint16_t XDATDLY  : 2;
	uint16_t XFIG     : 1;
	uint16_t XCOMPAND : 2;
	uint16_t XWDLEN2  : 3;
	uint16_t XFRLEN2  : 7;
	uint16_t XPHASE   : 1;
}XCR20_BITS;
typedef union {
	uint16_t all;
	XCR20_BITS bit;
}XCR20_REG;

typedef struct {
	uint16_t reserve0 : 5;
	uint16_t XWDLEN1  : 3;
	uint16_t XFRLEN1  : 7;
	uint16_t reserve1 : 1;
}XCR10_BITS;
typedef union {
	uint16_t all;
	XCR10_BITS bit;
}XCR10_REG;

typedef struct {
	uint16_t RDATDLY  : 2;
	uint16_t RFIG     : 1;
	uint16_t RCOMPAND : 2;
	uint16_t RWDLEN2  : 3;
	uint16_t RFRLEN2  : 7;
	uint16_t RPHASE   : 1;
} RCR20_BITS;
typedef union {
	uint16_t all;
	RCR20_BITS bit;
} RCR20_REG;

typedef struct {
	uint16_t reserve0  :5;
	uint16_t RWDLEN1   :3;
	uint16_t RFRLEN1   :7;
	uint16_t reserve   :1;
} RCR10_BITS;
typedef union {
	uint16_t all;
	RCR10_BITS bit;
} RCR10_REG;

typedef struct{
	uint16_t RRST 	  : 1;
	uint16_t RRDY     : 1;
	uint16_t RFULL    : 1;
	uint16_t RSYNCER  : 1;
	uint16_t RINTM    : 2;
	uint16_t reserve0 : 1;
	uint16_t DXENA    : 1;
	uint16_t reserve1 : 3;
	uint16_t CLKSTP   : 2;
	uint16_t RJUST    : 2;
	uint16_t DLB      : 1;
}SPCR10_BITS;
typedef union {
	uint16_t all;
	SPCR10_BITS bit;
}SPCR10_REG;

typedef struct{
	uint16_t XRST 	  : 1;
	uint16_t XRDY     : 1;
	uint16_t XEMPTY   : 1;
	uint16_t XSYNCER  : 1;
	uint16_t XINTM    : 2;
	uint16_t GRST     : 1;
	uint16_t FRST     : 1;
	uint16_t SOFT     : 1;
	uint16_t FREE     : 1;
	uint16_t reserve  : 6;
}SPCR20_BITS;
typedef union {
	uint16_t all;
	SPCR20_BITS bit;
}SPCR20_REG;

typedef struct {
	uint16_t CLKRP    :1;
	uint16_t CLKXP    :1;
	uint16_t FSRP     :1;
	uint16_t FSXP     :1;
	uint16_t DRSTAT   :1;
	uint16_t DXSTAT   :1;
	uint16_t reserve0 :1;
	uint16_t SCLKME   :1;
	uint16_t CLKRM    :1;
	uint16_t CLKXM    :1;
	uint16_t FSRM     :1;
	uint16_t FSXM     :1;
	uint16_t reserve1 :4;
} PCR0_BITS;
typedef union {
	uint16_t all;
	PCR0_BITS bit;
} PCR0_REG;

typedef struct  MFFINT_BITS {  
    uint16_t XINT      :1;     
    uint16_t reserve0  :1;     
    uint16_t RINT      :1;     
    uint16_t reserve1  :13;    
} MFFINT_BITS;
typedef union MFFINT_REG {
   uint16_t all;
   MFFINT_BITS bit;
} MFFINT0_REG;

typedef struct mcbsp_f28335_reg{
	/* Data Registers, Receive, Transmit */
	uint16_t DRR20;		/* Receiver register 2 */
	uint16_t DRR10;		/* Receiver register 1 */
	uint16_t DXR20;		/* Transmitter register 2 */
	uint16_t DXR10;		/* Transmitter register 1 */
	/* McBSP Control Registers */
	SPCR20_REG SPCR20;	/* Serial port Control register 2 */
	SPCR10_REG SPCR10;	/* Serial port Control register 1 */
	RCR20_REG RCR20;	/* Receiver Control register 2 */
	RCR10_REG RCR10;	/* Receiver Control register 1 */
	XCR20_REG XCR20;	/* Transmit Control register 2 */
	XCR10_REG XCR10;	/* Transmit Control register 1 */
	uint16_t SRGR20;	/* Sample Rate Generator register 2 */
	uint16_t SRGR10;	/* Sample Rate Generator register 1 */
	/* Multichannel Control Registers */
	uint16_t MCR20;		/* Multichannel Control register 2 */
	uint16_t MCR10;		/* Multichannel Control register 1 */
	uint16_t RCERA0;	/* Receiver Channel Enable register Partition A*/
	uint16_t RCERB0;	/* Receiver Channel Enable register Partition B*/
	uint16_t XCERA0;	/* Transmit Channel Enable register Partition A*/
	uint16_t XCERB0;	/* Transmit Channel Enable register Partition B*/
	PCR0_REG PCR0;		/* Pin Control register */
	uint16_t RCERC0;	/* Receiver Channel Enable register Partition C*/
	uint16_t RCERD0;	/* Receiver Channel Enable register Partition D*/
	uint16_t XCERC0;	/* Transmit Channel Enable register Partition C*/
	uint16_t XCERD0;	/* Transmit Channel Enable register Partition D*/
	uint16_t RCERE0;	/* Receiver Channel Enable register Partition E*/
	uint16_t RCERF0;	/* Receiver Channel Enable register Partition F*/
	uint16_t XCERE0;	/* Transmit Channel Enable register Partition E*/
	uint16_t XCERF0;	/* Transmit Channel Enable register Partition F*/
	uint16_t RCERG0;	/* Receiver Channel Enable register Partition G*/
	uint16_t RCERH0;	/* Receiver Channel Enable register Partition H*/
	uint16_t XCERG0;	/* Transmit Channel Enable register Partition G*/
	uint16_t XCERH0;	/* Transmit Channel Enable register Partition H*/
	MFFINT0_REG MFFINT0;	/* Interrupt Enable Register */
}mcbsp_f28335_reg_t;

static char* regs_name[] ={
	"DRR20",	
	"DRR10",	
	"DXR20",	
	"DXR10",	
	"SPCR20",	
	"SPCR10",	
	"RCR20",	
	"RCR10",	
	"XCR20",	
	"XCR10",	
	"SRGR20",	
	"SRGR10",	
	"MCR20",	
	"MCR10",	
	"RCERA0",	
	"RCERB0",	
	"XCERA0",	
	"XCERB0",	
	"PCR0",	
	"RCERC0",	
	"RCERD0",	
	"XCERC0",	
	"XCERD0",	
	"RCERE0",	
	"RCERF0",	
	"XCERE0",	
	"XCERF0",	
	"RCERG0",	
	"RCERH0",	
	"XCERG0",	
	"XCERH0",	
	"MFFINT0",	
	NULL
};

typedef struct mcbsp_f28335 {
	conf_object_t* obj;
	mcbsp_f28335_reg_t* regs;

	skyeye_uart_intf* term_iface;
	conf_object_t* term;

	general_signal_intf* signal_iface;
	conf_object_t* signal;

	int send_frame_length;
	int send_word1_length;
	int send_word2_length;
	int recv_frame_length;
	int recv_word1_length;
	int recv_word2_length;
	char **regs_name;
	int dev_enable;
} mcbsp_f28335_device;

typedef enum{
	DRR2 = 0x00,
	DRR1,
	DXR2,
	DXR1,
	SPCR2,	
	SPCR1,	
	RCR2,	
	RCR1,	
	XCR2,	
	XCR1,	
	SRGR2,	
	SRGR1,	
	MCR2,	
	MCR1,	
	RCERA,	
	RCERB,	
	XCERA,	
	XCERB,	
	PCR,	
	RCERC,	
	RCERD,	
	XCERC,	
	XCERD,	
	RCERE,	
	RCERF,	
	XCERE,	
	XCERF,	
	RCERG,	
	RCERH,	
	XCERG,	
	XCERH,	
	MFFINT = 0x23,
	REG_MAX_NUM = 32
}REG_NUM_T;

static uint32_t regs_offset[] = {
	0x0000,
	0x0001,
	0x0002,
	0x0003,
	0x0004,
	0x0005,
	0x0006,
	0x0007,
	0x0008,
	0x0009,
	0x000a,
	0x000b,
	0x000c,
	0x000d,
	0x000e,
	0x000f,
	0x0010,
	0x0011,
	0x0012,
	0x0013,
	0x0014,
	0x0015,
	0x0016,
	0x0017,
	0x0018,
	0x0019,
	0x001a,
	0x001b,
	0x001c,
	0x001d,
	0x001e,
	0x0023,
};

#endif /* __mcbsp_f28335_H__ */
