/* Copyright (C)
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
* 
*/
/**
* @file pie_c2812.h
* @brief The definition of pie controller 
* @author 
* @version 78.77
*/

/* Autogenerated by SkyEye script */
#ifndef __PIE_c2812_H__
#define __PIE_c2812_H__
#include "skyeye_system.h"
#include "pie_c2812_fifo.h"

#ifdef __cplusplus
extern "C" {
#endif

//---------------------------------------------------------------------------
// PIE Control Register Bit Definitions:
//
// PIECTRL: Register bit definitions:
struct PIECTRL_BITS {      // bits description
   uint16_t  ENPIE:1;        // 0    Enable PIE block
   uint16_t  PIEVECT:15;     // 15:1 Fetched vector address
};

union PIECTRL_REG {
   uint16_t                 all;
   struct PIECTRL_BITS  bit;
};  

// PIEIER: Register bit definitions:
struct PIEIER_BITS {       // bits description
   uint16_t INTx1:1;         // 0    INTx.1
   uint16_t INTx2:1;         // 1    INTx.2
   uint16_t INTx3:1;         // 2    INTx.3
   uint16_t INTx4:1;         // 3    INTx.4
   uint16_t INTx5:1;         // 4    INTx.5
   uint16_t INTx6:1;         // 5    INTx.6
   uint16_t INTx7:1;         // 6    INTx.7
   uint16_t INTx8:1;         // 7    INTx.8
   uint16_t rsvd:8;          // 15:8 reserved
};

union PIEIER_REG {
   uint16_t              all;
   struct PIEIER_BITS  bit;
}; 

// PIEIFR: Register bit definitions:
struct PIEIFR_BITS {       // bits description
   uint16_t INTx1:1;         // 0    INTx.1
   uint16_t INTx2:1;         // 1    INTx.2
   uint16_t INTx3:1;         // 2    INTx.3
   uint16_t INTx4:1;         // 3    INTx.4
   uint16_t INTx5:1;         // 4    INTx.5
   uint16_t INTx6:1;         // 5    INTx.6
   uint16_t INTx7:1;         // 6    INTx.7
   uint16_t INTx8:1;         // 7    INTx.8
   uint16_t rsvd:8;          // 15:8 reserved
};

union PIEIFR_REG {
   uint16_t              all;
   struct PIEIFR_BITS  bit;
};

// PIEACK: Register bit definitions:
struct PIEACK_BITS {       // bits description
   uint16_t ACK1:1;          // 0    Acknowledge PIE interrupt group 1
   uint16_t ACK2:1;          // 1    Acknowledge PIE interrupt group 2
   uint16_t ACK3:1;          // 2    Acknowledge PIE interrupt group 3
   uint16_t ACK4:1;          // 3    Acknowledge PIE interrupt group 4
   uint16_t ACK5:1;          // 4    Acknowledge PIE interrupt group 5
   uint16_t ACK6:1;          // 5    Acknowledge PIE interrupt group 6
   uint16_t ACK7:1;          // 6    Acknowledge PIE interrupt group 7
   uint16_t ACK8:1;          // 7    Acknowledge PIE interrupt group 8
   uint16_t ACK9:1;          // 8    Acknowledge PIE interrupt group 9
   uint16_t ACK10:1;         // 9    Acknowledge PIE interrupt group 10
   uint16_t ACK11:1;         // 10   Acknowledge PIE interrupt group 11
   uint16_t ACK12:1;         // 11   Acknowledge PIE interrupt group 12
   uint16_t rsvd:4;          // 15:12 reserved
};

union PIEACK_REG {
   uint16_t              all;
   struct PIEACK_BITS  bit;
};

//---------------------------------------------------------------------------
// PIE Control Register File:
//
typedef struct PIE_CTRL_REGS {
   union PIECTRL_REG PIECTRL;       // PIE control register
   union PIEACK_REG  PIEACK;        // PIE acknowledge
   union PIEIER_REG  PIEIER[13];       // PIE int1 IER register  
   union PIEIFR_REG  PIEIFR[13];       // PIE int1 IFR register
}pie_c2812_reg_t;     

#define PIEACK_GROUP1   0x0001
#define PIEACK_GROUP2   0x0002
#define PIEACK_GROUP3   0x0004
#define PIEACK_GROUP4   0x0008
#define PIEACK_GROUP5   0x0010
#define PIEACK_GROUP6   0x0020
#define PIEACK_GROUP7   0x0040
#define PIEACK_GROUP8   0x0080
#define PIEACK_GROUP9   0x0100
#define PIEACK_GROUP10  0x0200
#define PIEACK_GROUP11  0x0400
#define PIEACK_GROUP12  0x0800

typedef struct pie_c2812_device{
	conf_object_t* obj;
	pie_c2812_reg_t* regs;
	conf_object_t* signal;
	core_signal_intf* signal_iface;
    RWLOCK_T lock;
    FIFO* recv_fifo;
	time_handle_t *handle;
    irq_mesg_t irq_mesg;
}pie_c2812_device;

static char* regs_name[] = {
	"PIECTRL",
	"PIEACK",
	"PIEIER1",
	"PIEIFR1",
	"PIEIER2",
	"PIEIFR2",
	"PIEIER3",
	"PIEIFR3",
	"PIEIER4",
	"PIEIFR4",
	"PIEIER5",
	"PIEIFR5",
	"PIEIER6",
	"PIEIFR6",
	"PIEIER7",
	"PIEIFR7",
	"PIEIER8",
	"PIEIFR8",
	"PIEIER9",
	"PIEIFR9",
	"PIEIER10",
	"PIEIFR10",
	"PIEIER11",
	"PIEIFR11",
	"PIEIER12",
	"PIEIFR12",
	NULL
};

static uint32_t regs_offset[] = {
	0x0000,
	0x0001,
	0x0002,
	0x0003,
	0x0004,
	0x0005,
	0x0006,
	0x0007,
	0x0008,
	0x0009,
	0x000a,
	0x000b,
	0x000c,
	0x000d,
	0x000e,
	0x000f,
	0x0010,
	0x0011,
	0x0012,
	0x0013,
	0x0014,
	0x0015,
	0x0016,
	0x0017,
	0x0018,
	0x0019,
};
#ifdef __cplusplus
}
#endif /* extern "C" */

#endif
