/* Copyright (C)
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
* 
*/
/**
* @file mcasp_omapl138.h
* @brief The definition of system controller 
* @author 
* @version 78.77
*/

/* Autogenerated by SkyEye script */
#ifndef __mcasp_omapl138_H__
#define __mcasp_omapl138_H__

#define REV     0x0
#define PFUNC   0x10
#define PDIR 	0x14
#define PDOUT 	0x18
#define PDIN 	0x1c
#define PDSET 	0x1c
#define PDCLR 	0x20
#define GBLCTL	0x44
#define AMUTE 	0x48
#define DLBCTL 	0x4c
#define DITCTL 	0x50
#define RGBLCTL 0x60

#define RMASK	  0x64
#define RFMT 	  0x68
#define AFSRCTL   0x6c
#define ACLKRCTL  0x70
#define AHCLKRCTL 0x74
#define RTDM 	  0x78
#define RINTCTL   0x7c
#define RSTAT     0x80
#define RSLOT     0x84
#define RCLKCHK   0x88
#define REVTCTL   0x8c
#define XGBLCTL   0xa0

#define XMASK	  0xa4
#define XFMT 	  0xa8
#define AFSXCTL   0xac
#define ACLKXCTL  0xb0
#define AHCLKXCTL 0xb4
#define XTDM 	  0xb8
#define XINTCTL   0xbc
#define XSTAT     0xc0
#define XSLOT     0xc4
#define XCLKCHK   0xc8
#define XEVTCTL   0xcc

#define DITCSRA0   0x100
#define DITCSRA5   0x114

#define DITCSRB0   0x118
#define DITCSRB5   0x12c

#define DITUDRA0   0x130
#define DITUDRA5   0x144

#define DITUDRB0   0x148
#define DITUDRB5   0x15c

#define SRCTL0     0x180
#define SRCTL15    0x1bc

#define XBUF0      0x200
#define XBUF15     0x23c

#define RBUF0      0x280
#define RBUF15     0x2bc

#define AFIFOREV   0x1000
#define WFIFOCTL   0x1010
#define WFIFOSTS   0x1014
#define RFIFOCTL   0x1018
#define RFIFOSTS   0x101c

#define DATA_BASE_REG  0x2000
#define DATA_END_REG  0xC000
typedef struct mcasp_omapl138_reg{
	uint32_t rev; //0x1d00000
	uint32_t pfunc;
	uint32_t pdir;
	uint32_t pdout;
	uint32_t pdin;
	uint32_t pdset;
	uint32_t pdclr;
	uint32_t gblctl;
	uint32_t amute;
	uint32_t dlbctl;
	uint32_t ditctl;
	uint32_t rgblctl;
	uint32_t rmask;
	uint32_t rfmt;
	uint32_t afsrctl;
	uint32_t aclkrctl;
	uint32_t ahclkrctl;
	uint32_t rtdm;
	uint32_t rintctl;
	uint32_t rstat;
	uint32_t rslot;
	uint32_t rclkchk;
	uint32_t revtctl;
	uint32_t xgblctl;
	uint32_t xmask;
	uint32_t xfmt;
	uint32_t afsxctl;
	uint32_t aclkxctl;
	uint32_t ahclkxctl;
	uint32_t xtdm;
	uint32_t xintctl;
	uint32_t xstat;
	uint32_t xslot;
	uint32_t xclkchk;
	uint32_t xevtctl;
	uint32_t ditcsra[6];
	uint32_t ditcsrb[6];
	uint32_t ditudra[6];
	uint32_t ditudrb[6];
	uint32_t srctl[16];
	uint32_t xbuf[16];
	uint32_t rbuf[16];
	uint32_t afiforev;
	uint32_t wfifoctl;
	uint32_t wfifosts;
	uint32_t rfifoctl;
	uint32_t rfifosts;
}mcasp_omapl138_reg_t;

static char* regs_name[] ={
	"rev",	       
	"pfunc",       
	"pdir",	       
	"pdout",       
	"pdin",	       
	"pdset",       
	"pdclr",       
	"gblctl",      
	"amute",       
	"dlbctl",      
	"ditctl",      
	"rgblctl",     
	"rmask",       
	"rfmt",	       
	"afsrctl",     
	"aclkrctl",    
	"ahclkrctl",   
	"rtdm",	       
	"rintctl",     
	"rstat",       
	"rslot",       
	"rclkchk",     
	"revtctl",     
	"xgblctl",     
	"xmask",       
	"xfmt",	       
	"afsxctl",     
	"aclkxctl",    
	"ahclkxctl",   
	"xtdm",	       
	"xintctl",     
	"xstat",         
	"xslot",       
	"xclkchk",     
	"xevtctl",     
	"ditcsra0",    
	"ditcsra1",    
	"ditcsra2",    
	"ditcsra3",    
	"ditcsra4",    
	"ditcsra5",    
	"ditcsrb0",  
	"ditcsrb1",  
	"ditcsrb2",  
	"ditcsrb3",  
	"ditcsrb4",  
	"ditcsrb5",  
	"ditudra0",  
	"ditudra1",  
	"ditudra2",  
	"ditudra3",  
	"ditudra4",  
	"ditudra5",  
	"ditudrb0",  
	"ditudrb1",  
	"ditudrb2",  
	"ditudrb3",  
	"ditudrb4",  
	"ditudrb5",  
	"srctl0",    
	"srctl1",      
	"srctl2",      
	"srctl3",      
	"srctl4",      
	"srctl5",      
	"srctl6",      
	"srctl7",      
	"srctl8",      
	"srctl9",      
	"srctl10",     
	"srctl11",     
	"srctl12",     
	"srctl13",     
	"srctl14",     
	"srctl15",     
	"xbuf0",       
	"xbuf1",       
	"xbuf2",       
	"xbuf3",       
	"xbuf4",       
	"xbuf5",       
	"xbuf6",       
	"xbuf7",       
	"xbuf8",       
	"xbuf9",       
	"xbuf10",      
	"xbuf11",      
	"xbuf12",      
	"xbuf13",      
	"xbuf14",      
	"xbuf15",      
	"rbuf0",       
	"rbuf1",       
	"rbuf2",       
	"rbuf3",       
	"rbuf4",       
	"rbuf5",       
	"rbuf6",       
	"rbuf7",       
	"rbuf8",       
	"rbuf9",       
	"rbuf10",      
	"rbuf11",      
	"rbuf12",      
	"rbuf13",      
	"rbuf14",      
	"rbuf15",      
	"afiforev",    
	"wfifoctl",    
	"wfifosts",    
	"rfifoctl",    
	"rfifosts",    
	NULL
};
#define BUF_SIZE 0x1000000

typedef struct mcasp_omapl138{
	conf_object_t* obj;
	mcasp_omapl138_reg_t* regs;
	general_signal_intf* signal_iface;
	conf_object_t* signal;
	conf_object_t* i2c_bus_obj;
	i2c_bus_intf *i2c_bus_iface;
	conf_object_t* memory_obj;
	memory_space_intf *memory_space_iface;
	sound_intf *sound_iface;
	conf_object_t* sound_obj;
	uint32_t old_gblctl;
	char xbuf[BUF_SIZE];
	char rbuf[BUF_SIZE];
	int rx_bitstream;
	int transmit_pin;
	int receive_pin;
	int write_count;
	int read_count;
	int int_number;
	int transfer_type;
	char **regs_name;
}mcasp_omapl138_device;

#define READ_TYPE  0x1
#define WRITE_TYPE 0x2

#define AFIFO_WFIFOCTL_WENA ((dev->regs->wfifoctl >> 16) & 0x1)
#define AFIFO_RFIFOCTL_RENA ((dev->regs->rfifoctl >> 16) & 0x1)
#define XSRCLR   ((dev->regs->gblctl >> 10) & 0x1)
#define RSRCLR   ((dev->regs->gblctl >> 2) & 0x1)

#define SRMOD(n)    (dev->regs->srctl[n] & 0x3)

//Receive Bit Stream Format Register
#define RX_RRVRS             ((dev->regs->rfmt >> 15) & 0x1)
#define RX_SYNC_DELAY_BIT    ((dev->regs->rfmt >> 16) & 0x3)
#define RX_RPAD              ((dev->regs->rfmt >> 13) & 0x3)
#define RX_RSSZ              ((dev->regs->rfmt >> 4) & 0xF)
#define RX_RROT              (dev->regs->rfmt & 0x7)
#define RX_RBUSEL            ((dev->regs->rfmt >> 3) & 0x1)
//Receive Frame Sync Control Register 
#define RMOD      ((dev->regs->afsrctl >> 7) & 0x1FF)
#define FRWIDTH   ((dev->regs->afsrctl >> 4) & 0x1)
#define FSRP      (dev->regs->afsrctl & 0x1)
//Receive Clock Control Register
#define CLKRP     ((dev->regs->aclkrctl >> 7) & 0x1)
//Receive Clock Check Control Register
#define RMAX      ((dev->regs->rclkchk >> 16) & 0xFF)
#define RMIN      ((dev->regs->rclkchk >> 8) & 0xFF)
#define RPS       (dev->regs->rclkchk & 0xF)

//Transmit Bit Stream Format Register
#define TX_XRVRS             ((dev->regs->xfmt >> 15) & 0x1)
#define TX_SYNC_DELAY_BIT    ((dev->regs->xfmt >> 16) & 0x3)
#define TX_XPAD              ((dev->regs->xfmt >> 13) & 0x3)
#define TX_XSSZ              ((dev->regs->xfmt >> 4) & 0xF)
#define TX_XROT              (dev->regs->xfmt & 0x7)
#define TX_XBUSEL            ((dev->regs->xfmt >> 3) & 0x1)
//Transmit Frame Sync Control Register 
#define XMOD      ((dev->regs->afsxctl >> 7) & 0x1FF)
#define FXWIDTH   ((dev->regs->afsxctl >> 4) & 0x1)
#define FSXP      (dev->regs->afsxctl & 0x1)
//Transmit Clock Control Register
#define CLKXP     ((dev->regs->aclkxctl >> 7) & 0x1)
#define ASYNC     ((dev->regs->aclkxctl >> 6) & 0x1)
//Transmit Clock Check Control Register
#define XMAX      ((dev->regs->xclkchk >> 16) & 0xFF)
#define XMIN      ((dev->regs->xclkchk >> 8) & 0xFF)
#define XPS       (dev->regs->xclkchk & 0xF)


#define MCASP_RX_DMAERROR ((dev->regs->rintctl >> 3) & 0x1)
#define MCASP_RX_CLKFAIL ((dev->regs->rintctl >> 2) & 0x1)
#define MCASP_RX_SYNCERROR ((dev->regs->rintctl >> 31 & 0x1)
#define MCASP_RX_OVERRUN ((dev->regs->rintctl >> 0) & 0x1)

#define MCASP_TX_DMAERROR ((dev->regs->xintctl >> 3) & 0x1)
#define MCASP_TX_CLKFAIL ((dev->regs->xintctl >> 2) & 0x1)
#define MCASP_TX_SYNCERROR ((dev->regs->xintctl >> 1) & 0x1)
#define MCASP_TX_OVERRUN ((dev->regs->xintctl >> 0) & 0x1)
#endif
