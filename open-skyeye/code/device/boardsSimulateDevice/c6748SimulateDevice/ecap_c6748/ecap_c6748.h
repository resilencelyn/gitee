/* Copyright (C)
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
* 
*/
/**
* @file ecap_c6748.h
* @brief The definition of system controller 
* @author 
* @version 78.77
*/

/* Autogenerated by SkyEye script */
#ifndef __ECAP_C6748_H__
#define __ECAP_C6748_H__

#ifdef __cplusplus
extern "C" {
#endif

//---------------------------------------------------------------------------
// ECAP Individual Register Bit Definitions

//----------------------------------------------------------
//----------------------------------------------------
// Capture control register 1 bit definitions */                                    
typedef unsigned short Uint16;
typedef unsigned int Uint32;

struct ECCTL1_BITS {          // bits   description
   Uint16 CAP1POL:1;          // 0      Capture Event 1 Polarity select
   Uint16 CTRRST1:1;          // 1      Counter Reset on Capture Event 1
   Uint16 CAP2POL:1;          // 2      Capture Event 2 Polarity select
   Uint16 CTRRST2:1;          // 3      Counter Reset on Capture Event 2
   Uint16 CAP3POL:1;          // 4      Capture Event 3 Polarity select
   Uint16 CTRRST3:1;          // 5      Counter Reset on Capture Event 3
   Uint16 CAP4POL:1;          // 6      Capture Event 4 Polarity select
   Uint16 CTRRST4:1;          // 7      Counter Reset on Capture Event 4
   Uint16 CAPLDEN:1;          // 8      Enable Loading CAP1-4 regs on a Cap Event
   Uint16 PRESCALE:5;         // 13:9   Event Filter prescale select
   Uint16 FREE_SOFT:2;        // 15:14  Emulation mode
};

union ECCTL1_REG {
   Uint16              all;
   struct ECCTL1_BITS  bit;
};


// In V1.1 the STOPVALUE bit field was changed to 
// STOP_WRAP.  This correlated to a silicon change from
// F2833x Rev 0 to Rev A. 
//----------------------------------------------------
// Capture control register 2 bit definitions */                                    
struct ECCTL2_BITS {          // bits   description
   Uint16 CONT_ONESHT:1;      // 0      Continuous or one-shot
   Uint16 STOP_WRAP:2;        // 2:1    Stop value for one-shot, Wrap for continuous
   Uint16 REARM:1;            // 3      One-shot re-arm
   Uint16 TSCTRSTOP:1;        // 4      TSCNT counter stop
   Uint16 SYNCI_EN:1;         // 5      Counter sync-in select
   Uint16 SYNCO_SEL:2;        // 7:6    Sync-out mode
   Uint16 SWSYNC:1;           // 8      SW forced counter sync
   Uint16 CAP_APWM:1;         // 9      CAP/APWM operating mode select
   Uint16 APWMPOL:1;          // 10     APWM output polarity select
   Uint16 rsvd1:5;            // 15:11  
};


union ECCTL2_REG {
   Uint16              all;
   struct ECCTL2_BITS  bit;
};


//----------------------------------------------------
// ECAP interrupt enable register bit definitions */                                    
struct ECEINT_BITS {          // bits   description
   Uint16 rsvd1:1;            // 0      reserved
   Uint16 CEVT1:1;            // 1      Capture Event 1 Interrupt Enable
   Uint16 CEVT2:1;            // 2      Capture Event 2 Interrupt Enable
   Uint16 CEVT3:1;            // 3      Capture Event 3 Interrupt Enable
   Uint16 CEVT4:1;            // 4      Capture Event 4 Interrupt Enable         
   Uint16 CTROVF:1;           // 5      Counter Overflow Interrupt Enable
   Uint16 CTR_EQ_PRD:1;       // 6      Period Equal Interrupt Enable
   Uint16 CTR_EQ_CMP:1;       // 7      Compare Equal Interrupt Enable
   Uint16 rsvd2:8;            // 15:8   reserved
};


union ECEINT_REG {
   Uint16              all;
   struct ECEINT_BITS  bit;
};

//----------------------------------------------------
// ECAP interrupt flag register bit definitions */                                    
struct ECFLG_BITS {           // bits   description
   Uint16 INT:1;              // 0      Global Flag
   Uint16 CEVT1:1;            // 1      Capture Event 1 Interrupt Flag
   Uint16 CEVT2:1;            // 2      Capture Event 2 Interrupt Flag
   Uint16 CEVT3:1;            // 3      Capture Event 3 Interrupt Flag
   Uint16 CEVT4:1;            // 4      Capture Event 4 Interrupt Flag         
   Uint16 CTROVF:1;           // 5      Counter Overflow Interrupt Flag
   Uint16 CTR_EQ_PRD:1;       // 6      Period Equal Interrupt Flag
   Uint16 CTR_EQ_CMP:1;       // 7      Compare Equal Interrupt Flag
   Uint16 rsvd2:8;            // 15:8   reserved
};


union ECFLG_REG {
   Uint16              all;
   struct ECFLG_BITS   bit;
};

union WORD_TYPE {
	Uint32  all;
	struct {
		Uint16 low;
		Uint16 high;
	};
};

//----------------------------------------------------

//---------------------------------------------------------------------------
// ECAP Register File:
// Address : 0x6A00
typedef struct  ECAP_REGS {
   union   WORD_TYPE   tsctr;    // Time stamp counter 
   union   WORD_TYPE   ctrphs;   // Counter phase
   union   WORD_TYPE   cap1;     // Capture 1 
   union   WORD_TYPE   cap2;     // Capture 2    
   union   WORD_TYPE   cap3;     // Capture 3 
   union   WORD_TYPE   cap4;     // Capture 4   
   union   ECCTL1_REG  ecctl1;   // Capture Control Reg 1
   union   ECCTL2_REG  ecctl2;   // Capture Control Reg 2
   union   ECEINT_REG  eceint;   // ECAP interrupt enable
   union   ECFLG_REG   ecflg;    // ECAP interrupt flags
   union   ECFLG_REG   ecclr;    // ECAP interrupt clear
   union   ECEINT_REG  ecfrc;    // ECAP interrupt force
   uint32_t            revid;
}ecap_c6748_reg_t;

#define MAX_DEVICE_NUM  6	

#define TSCTR   0x0
#define CTRPHS  0x4
#define CAP1    0x8
#define CAP2    0xc
#define CAP3    0x10
#define CAP4    0x14
#define ECCTL1  0x28
#define ECCTL2  0x2a
#define ECEINT  0x2c
#define ECFLG   0x2e
#define ECCLR   0x30
#define ECFRC   0x32
#define REVID   0x5c

typedef struct ecap_c6748_device{
	conf_object_t* obj;
	ecap_c6748_reg_t* regs;

	general_signal_intf* signal_iface;
	conf_object_t* signal;
	int mod4_count;
	int stop;
	int sync_flag;
	int int_number;
	int timer_sched_id;
}ecap_c6748_device;

static char* regs_name[] = {
	"tsctr",
	"ctrphs",
	"cap1",
	"cap2",
	"cap3",
	"cap4",
	"ecctl1",
	"ecctl2",
	"eceint",
	"ecflg",
	"ecclr",
	"ecfrc",
	"revid",
	NULL
};

#define OVER_FLOW 0xFFFFFFFF
static uint32_t regs_offset[] = {
    0x0,
    0x4,
    0x8,
    0xc,
    0x10,
    0x14,
    0x28,
    0x2a,
    0x2c,
    0x2e,
    0x30,
    0x32,
    0x5c
};

#ifdef __cplusplus
}
#endif /* extern "C" */

#endif
