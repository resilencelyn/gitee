/* Copyright (C)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*
*/
/**
* @file uart_at91rm9200.h
* @brief The definition of system controller
* @author
* @version 78.77
*/

/* Autogenerated by SkyEye script */
#ifndef __uart_at91rm9200_H__
#define __uart_at91rm9200_H__
#include "at91rm9200_fifo.h"

#define UART_NUM 4

typedef struct uart_at91rm9200_reg {
	uint32_t cr;			/* control */
	uint32_t mr;			/* mode */
	uint32_t ier;			/* interrupt enable */
	uint32_t idr;			/* interrupt disable */
	uint32_t imr;			/* interrupt mask */
	uint32_t csr;			/* channel status */
	uint32_t rhr;			/* receive holding */
	uint32_t thr;			/* tramsmit holding  */
	uint32_t brgr;			/* baud rate generator */
	uint32_t rtor;			/* rx time-out */
	uint32_t ttgr;			/* tx time-guard */
	uint32_t fidi;			/* fi di ratio register */
	uint32_t ner;			/* number of errors register */
	uint32_t us_if;			/* irda filter register */
} uart_at91rm9200_reg_t;

typedef struct uart_at91rm9200_device{
	conf_object_t* obj;
	uart_at91rm9200_reg_t regs[UART_NUM];
	skyeye_uart_intf* term_iface;
	conf_object_t* term;
	general_signal_intf* signal_iface;
	conf_object_t* signal;
	uint32_t sig_no[UART_NUM];
	char **regs_name;
	FIFO *read_fifo;
	int dev_enable;
} uart_at91rm9200_device;

static char* regs_name[] ={
	"cr0",
	"mr0",
	"ier0",
	"idr0",
	"imr0",
	"csr0",
	"rhr0",
	"thr0",
	"brgr0",
	"rtor0",
	"ttgr0",
	"fidi0",
	"ner0",
	"us_if0",

	"cr1",
	"mr1",
	"ier1",
	"idr1",
	"imr1",
	"csr1",
	"rhr1",
	"thr1",
	"brgr1",
	"rtor1",
	"ttgr1",
	"fidi1",
	"ner1",
	"us_if1",

	"cr2",
	"mr2",
	"ier2",
	"idr2",
	"imr2",
	"csr2",
	"rhr2",
	"thr2",
	"brgr2",
	"rtor2",
	"ttgr2",
	"fidi2",
	"ner2",
	"us_if2",

	"cr3",
	"mr3",
	"ier3",
	"idr3",
	"imr3",
	"csr3",
	"rhr3",
	"thr3",
	"brgr3",
	"rtor3",
	"ttgr3",
	"fidi3",
	"ner3",
	"us_if3",
	NULL
};

#define US_CR           0x0
#define US_MR           0x4
#define US_IER          0x8
#define US_IDR         	0xC
#define US_IMR         	0x10
#define US_CSR         	0x14
#define US_RHR         	0x18
#define US_THR         	0x1C
#define US_BRGR         0x20
#define US_RTOR         0x24
#define US_TTGR         0x28
#define US_FIDI         0x40
#define US_NER         	0x44
#define US_IF         	0x4C

#define US_INT_RXRDY        ( 0x1 <<  0)	// (USART) RXRDY Interrupt
#define US_INT_TXRDY        ( 0x1 <<  1)	// (USART) TXRDY Interrupt
#define US_INT_RXBRK        ( 0x1 <<  2)	// (USART) Break Received/End of Break
#define US_INT_ENDRX        ( 0x1 <<  3)	// (USART) End of Receive Transfer Interrupt
#define US_INT_ENDTX        ( 0x1 <<  4)	// (USART) End of Transmit Interrupt
#define US_INT_OVRE         ( 0x1 <<  5)	// (USART) Overrun Interrupt
#define US_INT_FRAME        ( 0x1 <<  6)	// (USART) Framing Error Interrupt
#define US_INT_PARE         ( 0x1 <<  7)	// (USART) Parity Error Interrupt
#define US_INT_TIMEOUT      ( 0x1 <<  8)	// (USART) Receiver Time-out
#define US_INT_TXEMPTY      ( 0x1 <<  9)	// (USART) TXEMPTY Interrupt
#define US_INT_ITERATION    ( 0x1 << 10)	// (USART) Max number of Repetitions Reached
#define US_INT_TXBUFE       ( 0x1 << 11)	// (USART) TXBUFE Interrupt
#define US_INT_RXBUFF       ( 0x1 << 12)	// (USART) RXBUFF Interrupt
#define US_INT_NACK         ( 0x1 << 13)	// (USART) Non Acknowledge
#define US_INT_RIIC         ( 0x1 << 16)	// (USART) Ring INdicator Input Change Flag
#define US_INT_DSRIC        ( 0x1 << 17)	// (USART) Data Set Ready Input Change Flag
#define US_INT_DCDIC        ( 0x1 << 18)	// (USART) Data Carrier Flag
#define US_INT_CTSIC        ( 0x1 << 19)	// (USART) Clear To Send Input Change Flag


#define US_CR_RSTRX		( 0x1 <<  2)
#define US_CR_RSTTX		( 0x1 <<  3)
#define US_CR_RXEN		( 0x1 <<  4)
#define US_CR_RXDIS		( 0x1 <<  5)
#define US_CR_TXEN		( 0x1 <<  6)
#define US_CR_TXDIS		( 0x1 <<  7)
#define US_CR_RSTSTA		( 0x1 <<  8)
#define US_CR_STTBRK		( 0x1 <<  9)
#define US_CR_STPBRK		( 0x1 << 10)
#define US_CR_STTTO		( 0x1 << 11)
#define US_CR_SENDA		( 0x1 << 12)
#define US_CR_RSTIT		( 0x1 << 13)
#define US_CR_RSTNACK		( 0x1 << 14)
#define US_CR_RETTO		( 0x1 << 15)
#define US_CR_DTREN		( 0x1 << 16)
#define US_CR_DTRDIS		( 0x1 << 17)
#define US_CR_RTSEN		( 0x1 << 18)
#define US_CR_RTSDIS		( 0x1 << 19)

#endif
