/* Copyright (C)
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
* 
*/
/**
* @file uart_c2812.h
* @brief The definition of system controller 
* @author 
* @version 78.77
*/

/* Autogenerated by SkyEye script */
#ifndef __uart_c2812_H__
#define __uart_c2812_H__

typedef struct reg_status
{
	uint32 data_ready                          :1;
	uint32 transmitter_shift_register_empty    :1;
	uint32 transmitter_hold_register_empty     :1;
	uint32 break_received                      :1;
	uint32 overrun                             :1;
	uint32 parity_error                        :1;
	uint32 framing_error                       :1;
	uint32 reserved                            :25;
}status_t;

typedef struct reg_control
{
	uint32 receiver_enable                     :1;
	uint32 transmitter_enable                  :1;
	uint32 receiver_interrupt_enable           :1;
	uint32 transmitter_interrupt_enable        :1;
	uint32 parity_select                       :1;
	uint32 parity_enable                       :1;
	uint32 flow_control                        :1;
	uint32 loop_back                           :1;
	uint32 external_clock                      :1;
	uint32 reserved                            :23;
}control_t;
#define FIFO_SIZE	1024

typedef struct uart_c2812_device{
	conf_object_t* obj;
	struct registers
	{
		uint32 data;

		union{
			status_t flag;
			uint32 value;
		}status;

		union{
			control_t flag;
			uint32 value;
		}control;

		uint32 scaler;
	}regs;
	skyeye_uart_intf* term;
	conf_object_t* term_obj;

	uart_file_intf *uart_file_iface;
	conf_object_t *uart_file;
	struct{
		conf_object_t* obj;
		skyeye_uart_intf* term;
	}term_dev;
	struct {
		conf_object_t *obj;
		char *port;
		const skyeye_serial_device_t* serial_dev;
	}uart_term;
	struct fifo{
		char buf[FIFO_SIZE];
		uint32 start;
		uint32 end;
	}fifo;
	general_signal_intf* signal_iface;
	conf_object_t* signal;
	uint32_t sig_no;
	char **regs_name;
	int dev_enable;
}uart_c2812_device;

static char* regs_name[] = {
	"Data_Reg",
	"Status_Reg",
	"Control_reg",
	"Scaler_reg",
	NULL
};
#define UART_DATA_REGISTER      0x0
#define UART_STATUS_REGISTER    0x4
#define UART_CONTROL_REGISTER   0x8
#define UART_SCALER_REGISTER    0xc

#define  UDATA    dev->regs.data
#define  USTATUS  dev->regs.status.value
#define  UCONTROL dev->regs.control.value
#define  USCALER  dev->regs.scaler

#endif
