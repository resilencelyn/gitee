/* Copyright (C)
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 */
/**
 * @file rs422_uart.h
 * @brief The definition of system controller 
 * @author 
 * @version 78.77
 */

/* Autogenerated by SkyEye script */
#ifndef __rs422_uart_H__
#define __rs422_uart_H__
#include <skyeye_lock.h>

#define FIFO_SIZE	0x4096

typedef union {
    uint32_t rts_reg;
    struct {
        uint16_t low;
        uint16_t high;
    };
}rts_signal_reg;

typedef union {
    uint16_t lsb_low;
    uint16_t lsb_high;
    uint16_t msb_low;
}rts_signal_time_reg;

typedef union {
    uint32_t signal_reg;
    struct {
        uint16_t low;
        uint16_t high;
    };
}signal_count_reg;

typedef struct rs422_uart_reg{
    uint32_t com_idx;  // 串口切换通道寄存器
    uint32_t general_uart_command;  // 串口复位及状态寄存器1 
    uint32_t general_uart_send_status; // 串口发送结束状态寄存器1
    uint32_t general_uart_recv_length;      // 串口接收数量寄存器1
    uint32_t general_uart_recv_status;          // 串口奇偶校验结果寄存器1
    uint32_t bk_uart_command;  // 串口复位及状态寄存器2(19.2k) 
    uint32_t bk_uart_send_status; // 串口发送结束状态寄存器2(19.2k)
    uint32_t bk_uart_recv_length;      // 串口接收数量寄存器2(19.2k)
    uint32_t bk_uart_recv_status;          // 串口奇偶校验结果寄存器2
    uint32_t st1_command_reg;  // 独立串口1复位及状态寄存器寄存器
    uint32_t st1_send_status; // 独立串口1发送结束状态寄存器
    uint32_t st1_recv_length;      // 独立串口1接收数量寄存器
    uint32_t st2_command_reg;  // 独立串口2复位及状态寄存器寄存器
    uint32_t st2_send_status; // 独立串口2发送结束状态寄存器
    uint32_t st2_recv_length;      // 独立串口2接收数量寄存器
    uint32_t st3_command_reg;  // 独立串口3复位及状态寄存器寄存器
    uint32_t st3_send_status; // 独立串口3发送结束状态寄存器
    uint32_t st3_recv_length;      // 独立串口3接收数量寄存器
    uint32_t st4_command_reg;  // 独立串口4复位及状态寄存器寄存器
    uint32_t st4_send_status; // 独立串口4发送结束状态寄存器
    uint32_t st4_recv_length;      // 独立串口4接收数量寄存器
    uint32_t st1_sync_signal;        //独立串口1同步信号寄存器
    uint32_t st2_sync_signal;        //独立串口2同步信号寄存器
    uint32_t st3_sync_signal;        //独立串口3同步信号寄存器
    uint32_t st4_sync_signal;        //独立串口4同步信号寄存器
    uint32_t st1_rts_signal;        //独立串口1RTS信号寄存器
    uint32_t st2_rts_signal;        //独立串口1RTS信号寄存器
    uint32_t st3_rts_signal;        //独立串口1RTS信号寄存器
    uint32_t st4_rts_signal;        //独立串口1RTS信号寄存器
    rts_signal_reg st1_rts_signal_count;        //独立串口1RTS下降沿锁存的同步信号个数寄存器
    rts_signal_time_reg st1_rts_signal_time;        //独立串口1RTS下降沿锁存的最近一个同步信号对应的时间基准寄存器
    rts_signal_reg st2_rts_signal_count;        //独立串口2RTS下降沿锁存的同步信号个数寄存器
    rts_signal_time_reg st2_rts_signal_time;        //独立串口2RTS下降沿锁存的最近一个同步信号对应的时间基准寄存器
    rts_signal_reg st3_rts_signal_count;        //独立串口3RTS下降沿锁存的同步信号个数寄存器
    rts_signal_time_reg st3_rts_signal_time;        //独立串口3RTS下降沿锁存的最近一个同步信号对应的时间基准寄存器
    rts_signal_reg st4_rts_signal_count;        //独立串口4RTS下降沿锁存的同步信号个数寄存器
    rts_signal_time_reg st4_rts_signal_time;        //独立串口4RTS下降沿锁存的最近一个同步信号对应的时间基准寄存器
    signal_count_reg st1_signal_count;       //独立串口1同步信号总个数
    signal_count_reg st2_signal_count;       //独立串口2同步信号总个数
    signal_count_reg st3_signal_count;       //独立串口3同步信号总个数
    signal_count_reg st4_signal_count;       //独立串口4同步信号总个数
    uint32_t base_time_reg_1;  //时间基准置数寄存器：时间基准写最低16位时间b0~b16
    uint32_t base_time_reg_2;  //时间基准写低16位时间b16~b31
    uint32_t base_time_reg_3;  //时间基准写中16位时间b31~b47
    uint32_t base_time_cmd_reg;  //时间基准计数置初值指令
    uint32_t adjust_clock;        //微调操作 //AABB 拨快1个时间单位，5544 拨慢1个时间单位 
    uint32_t gps_fault_time_reg_1; //GPS下降沿锁存的时间寄存器：时间基准写最低16位时间b0~b16
    uint32_t gps_fault_time_reg_2; //时间基准写低16位时间b16~b31
    uint32_t gps_fault_time_reg_3; //时间基准写中16位时间b31~b47

}rs422_uart_reg_t;

typedef struct {
    unsigned char *send_buf;
    unsigned char *recv_buf;
    uint32_t send_cnt;
    uint32_t recv_cnt;
    uint32_t send_length;
}fifo_t;

typedef union{
    uint64_t time;
    struct{
        uint16_t time1;
        uint16_t time2;
        uint16_t time3;
        uint16_t time4;
    };
}uart_time_t;

typedef struct rs422_uart_device{
    conf_object_t* obj;
    rs422_uart_reg_t* regs;

    conf_object_t* intf_obj;
    skyeye_uart_data_intf* uart_intf;

    rs422_linker_intf *rs422_linker_iface;
    conf_object_t *rs422_obj;
    pulse_linker_intf* pulse_linker_iface;
    conf_object_t* pulse_linker;
    struct term{
        conf_object_t* obj;
        skyeye_uart_intf* intf;
    }term;
    fifo_t uart_fifo[6];
    int uart_num;
    int sync_cnt[4];
    int sync_enable[4];
    time_handle_t handle;
    time_handle_t sync_handle;
    int time_cnt;
    uart_time_t uart_time;
    get_aocs_intf* aocs_iface;
    conf_object_t* aocs;
}rs422_uart_device;

typedef struct
{
    conf_object_t *obj;
    conf_object_t *rs422;
    bu61580_ram_intf *rs422_ram_iface;
    conf_object_t *uart_file;
    uart_file_intf *uart_file_iface;
    int flag;
}rs422_ram_dev;

//串口发送和接收缓冲区
#define UART_CHANNEL0_SEND_RAM_START	0x0 //公用串口
#define UART_CHANNEL0_SEND_RAM_END		0x3F8

#define UART_CHANNEL1_SEND_RAM_START	0x1000 //19.2K串口
#define UART_CHANNEL1_SEND_RAM_END		0x13F8

#define UART_CHANNEL2_SEND_RAM_START	0x2000 //独立串口1
#define UART_CHANNEL2_SEND_RAM_END		0x27F8

#define UART_CHANNEL3_SEND_RAM_START	0x2C00 //独立串口2
#define UART_CHANNEL3_SEND_RAM_END		0x33F8

#define UART_CHANNEL4_SEND_RAM_START	0x3800 //独立串口3
#define UART_CHANNEL4_SEND_RAM_END		0x3FF8

#define UART_CHANNEL5_SEND_RAM_START	0x4270 //独立串口4
#define UART_CHANNEL5_SEND_RAM_END		0x4BF8


#define UART_CHANNEL0_RECV_RAM_START	0x800 //公用串口
#define UART_CHANNEL0_RECV_RAM_END		0xBF8

#define UART_CHANNEL1_RECV_RAM_START	0x1800 //19.2K串口
#define UART_CHANNEL1_RECV_RAM_END		0x1BF8

#define UART_CHANNEL2_RECV_RAM_START	0x5000 //独立串口1
#define UART_CHANNEL2_RECV_RAM_END		0x6FF8

#define UART_CHANNEL3_RECV_RAM_START	0x7400 //独立串口2
#define UART_CHANNEL3_RECV_RAM_END		0x93F8

#define UART_CHANNEL4_RECV_RAM_START	0x9800 //独立串口3
#define UART_CHANNEL4_RECV_RAM_END		0xB7F8

#define UART_CHANNEL5_RECV_RAM_START	0xBC00 //独立串口4
#define UART_CHANNEL5_RECV_RAM_END		0xDBF8


#define IO_PULSE_NUM  2

#define BK_19200 17 //19200串口
#define ST1A 18 //星敏串口1a
#define ST1B 19 //星敏串口1b
#define ST2  20 //星敏串口2
#define ST3  21 //星敏串口3

static char* regs_name[] = {
    "com_idx",
    "general_uart_command",
    "general_uart_send_status",
    "general_uart_recv_length",
    "general_uart_recv_status",
    "bk_uart_command",
    "bk_uart_send_status",
    "bk_uart_recv_length",
    "bk_uart_recv_status",
    "st1_command_reg",
    "st1_send_status",
    "st1_recv_length",
    "st2_command_reg",
    "st2_send_status",
    "st2_recv_length",
    "st3_command_reg",
    "st3_send_status",
    "st3_recv_length",
    "st4_command_reg",
    "st4_send_status",
    "st4_recv_length",
    "st1_sync_signal",
    "st2_sync_signal",
    "st3_sync_signal",
    "st4_sync_signal",
    "st1_rts_signal",
    "st2_rts_signal",
    "st3_rts_signal",
    "st4_rts_signal",
    "st1_rts_signal_count",
    "st1_rts_signal_time",
    "st2_rts_signal_count",
    "st2_rts_signal_time",
    "st3_rts_signal_count",
    "st3_rts_signal_time",
    "st4_rts_signal_count",
    "st4_rts_signal_time",
    "st1_signal_count",
    "st2_signal_count",
    "st3_signal_count",
    "st4_signal_count",
    "base_time_reg_1",
    "base_time_reg_2",
    "base_time_reg_3",
    "base_time_cmd_reg",
    "adjust_clock",
    "gps_fault_time_reg_1",
    "gps_fault_time_reg_2",
    "gps_fault_time_reg_3",
    NULL
};

#define COM_IDX 0xc00
#define GENERAL_UART_COMMAND 0xc04
#define GENERAL_UART_SEND_STATUS 0x1400
#define GENERAL_UART_RECV_LENGTH 0x1404
#define GENERAL_UART_RECV_STATUS 0x1408

#define BK_UART_COMMAND 0xd40
#define BK_UART_SEND_STATUS 0x1540
#define BK_UART_RECV_LENGTH 0x1544
#define BK_UART_RECV_STATUS 0x1548

#define ST1_COMMAND_REG 0xc40
#define ST1_SEND_STATUS 0x1440
#define ST1_RECV_LENGTH 0x1444

#define ST2_COMMAND_REG 0xc80
#define ST2_SEND_STATUS 0x1480
#define ST2_RECV_LENGTH 0x1484

#define ST3_COMMAND_REG 0xcc0
#define ST3_SEND_STATUS 0x14c0
#define ST3_RECV_LENGTH 0x14c4

#define ST4_COMMAND_REG 0xd00
#define ST4_SEND_STATUS 0x1500
#define ST4_RECV_LENGTH 0x1504

#define ST1_SYNC_SIGNAL 0xc48
#define ST2_SYNC_SIGNAL 0xc88
#define ST3_SYNC_SIGNAL 0xcc8
#define ST4_SYNC_SIGNAL 0xd08

#define ST1_RTS_SIGNAL 0xc4c
#define ST2_RTS_SIGNAL 0xc8c
#define ST3_RTS_SIGNAL 0xccc
#define ST4_RTS_SIGNAL 0xd0c

#define ST1_RTS_COUNT_LOW      0x1448
#define ST1_RTS_COUNT_HIGH     0x144c
#define ST1_RTS_TIME_LSB_LOW   0x1450
#define ST1_RTS_TIME_LSB_HIGH  0x1454
#define ST1_RTS_TIME_MSB_LOW   0x1458

#define ST2_RTS_COUNT_LOW      0x1488
#define ST2_RTS_COUNT_HIGH     0x148c
#define ST2_RTS_TIME_LSB_LOW   0x1490
#define ST2_RTS_TIME_LSB_HIGH  0x1494
#define ST2_RTS_TIME_MSB_LOW   0x1498

#define ST3_RTS_COUNT_LOW      0x14c8
#define ST3_RTS_COUNT_HIGH     0x14cc
#define ST3_RTS_TIME_LSB_LOW   0x14d0
#define ST3_RTS_TIME_LSB_HIGH  0x14d4
#define ST3_RTS_TIME_MSB_LOW   0x14d8

#define ST4_RTS_COUNT_LOW      0x1508
#define ST4_RTS_COUNT_HIGH     0x150c
#define ST4_RTS_TIME_LSB_LOW   0x1510
#define ST4_RTS_TIME_LSB_HIGH  0x1514
#define ST4_RTS_TIME_MSB_LOW   0x1518

#define ST1_SIGNAL_COUNT_LOW   0x145c
#define ST1_SIGNAL_COUNT_HIGH  0x1460
#define ST2_SIGNAL_COUNT_LOW   0x149c
#define ST3_SIGNAL_COUNT_LOW   0x14dc
#define ST3_SIGNAL_COUNT_HIGH  0x14e0
#define ST4_SIGNAL_COUNT_LOW   0x151c
#define ST4_SIGNAL_COUNT_HIGH  0x1520

#define UART_TIME1    0xd44
#define UART_TIME2    0xd48
#define UART_TIME3    0xd4c
#define BASE_TIME_CMD 0xd50
#define ADJUST_CLOCK  0xd80
#define GPS_TIME_1    0xdc0
#define GPS_TIME_2    0xdc4
#define GPS_TIME_3    0xdc8
#endif
