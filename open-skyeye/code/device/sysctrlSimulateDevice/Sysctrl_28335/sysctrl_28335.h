/* Copyright (C)
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
* 
*/
/**
* @file syscrtl_28335.h
* @brief The definition of system controller 
* @author 
* @version 78.77
*/

/* Autogenerated by SkyEye script */
#ifndef __SYSCTRL_28335_H__
#define __SYSCTRL_28335_H__
#include <skyeye_system.h>

#ifdef __cplusplus
extern "C" {
#endif

//---------------------------------------------------------------------------
// System Control Individual Register Bit Definitions:
//


// PLL Status Register
struct PLLSTS_BITS   {    // bits  description
   uint16_t PLLLOCKS:1;     // 0     PLL lock status
   uint16_t rsvd1:1;        // 1     reserved
   uint16_t PLLOFF:1;       // 2     PLL off bit
   uint16_t MCLKSTS:1;      // 3     Missing clock status bit
   uint16_t MCLKCLR:1;      // 4     Missing clock clear bit
   uint16_t OSCOFF:1;       // 5     Oscillator clock off
   uint16_t MCLKOFF:1;      // 6     Missing clock detect
   uint16_t DIVSEL:2;       // 7     Divide Select
   uint16_t rsvd2:7;        // 15:7  reserved
};

union PLLSTS_REG {
   uint16_t              all;
   struct PLLSTS_BITS  bit;
};

// High speed peripheral clock register bit definitions:
struct HISPCP_BITS  {   // bits  description
   uint16_t HSPCLK:3;     // 2:0   Rate relative to SYSCLKOUT
   uint16_t rsvd1:13;     // 15:3  reserved
};

union HISPCP_REG {
   uint16_t              all;
   struct HISPCP_BITS  bit;
};

// Low speed peripheral clock register bit definitions:
struct LOSPCP_BITS  {   // bits  description
   uint16_t LSPCLK:3;     // 2:0   Rate relative to SYSCLKOUT
   uint16_t rsvd1:13;     // 15:3  reserved
};

union LOSPCP_REG {
   uint16_t              all;
   struct LOSPCP_BITS  bit;
};

// Peripheral clock control register 0 bit definitions:
struct PCLKCR0_BITS  {   // bits  description
   uint16_t rsvd1:2;       // 1:0   reserved
   uint16_t TBCLKSYNC:1;   // 2     EWPM Module TBCLK enable/sync
   uint16_t ADCENCLK:1;    // 3     Enable high speed clk to ADC
   uint16_t I2CAENCLK:1;   // 4     Enable SYSCLKOUT to I2C-A
   uint16_t SCICENCLK:1;   // 5     Enalbe low speed clk to SCI-C
   uint16_t rsvd2:2;       // 7:6   reserved
   uint16_t SPIAENCLK:1;   // 8     Enable low speed clk to SPI-A
   uint16_t rsvd3:1;       // 9     reserved
   uint16_t SCIAENCLK:1;   // 10    Enable low speed clk to SCI-A
   uint16_t SCIBENCLK:1;   // 11    Enable low speed clk to SCI-B
   uint16_t MCBSPAENCLK:1; // 12    Enable low speed clk to McBSP-A
   uint16_t MCBSPBENCLK:1; // 13    Enable low speed clk to McBSP-B
   uint16_t ECANAENCLK:1;  // 14    Enable system clk to eCAN-A
   uint16_t ECANBENCLK:1;  // 15    Enable system clk to eCAN-B
};

union PCLKCR0_REG {
   uint16_t              all;
   struct PCLKCR0_BITS bit;
};

// Peripheral clock control register 1 bit definitions:
struct PCLKCR1_BITS  {    // bits  description
   uint16_t EPWM1ENCLK:1;   // 0     Enable SYSCLKOUT to EPWM1
   uint16_t EPWM2ENCLK:1;   // 1     Enable SYSCLKOUT to EPWM2
   uint16_t EPWM3ENCLK:1;   // 2     Enable SYSCLKOUT to EPWM3
   uint16_t EPWM4ENCLK:1;   // 3     Enable SYSCLKOUT to EPWM4
   uint16_t EPWM5ENCLK:1;   // 4     Enable SYSCLKOUT to EPWM5
   uint16_t EPWM6ENCLK:1;   // 5     Enable SYSCLKOUT to EPWM6
   uint16_t rsvd1:2;        // 7:6   reserved
   uint16_t ECAP1ENCLK:1;   // 8     Enable SYSCLKOUT to ECAP1
   uint16_t ECAP2ENCLK:1;   // 9     Enable SYSCLKOUT to ECAP2
   uint16_t ECAP3ENCLK:1;   // 10    Enable SYSCLKOUT to ECAP3
   uint16_t ECAP4ENCLK:1;   // 11    Enable SYSCLKOUT to ECAP4
   uint16_t ECAP5ENCLK:1;   // 12    Enable SYSCLKOUT to ECAP5
   uint16_t ECAP6ENCLK:1;   // 13    Enable SYSCLKOUT to ECAP6
   uint16_t EQEP1ENCLK:1;   // 14    Enable SYSCLKOUT to EQEP1
   uint16_t EQEP2ENCLK:1;   // 15    Enable SYSCLKOUT to EQEP2
};

union PCLKCR1_REG {
   uint16_t              all;
   struct PCLKCR1_BITS bit;
};


// Peripheral clock control register 2 bit definitions:
struct PCLKCR3_BITS  {        // bits  description
   uint16_t rsvd1:8;            // 7:0   reserved
   uint16_t CPUTIMER0ENCLK:1;   // 8     Enable SYSCLKOUT to CPU-Timer 0
   uint16_t CPUTIMER1ENCLK:1;   // 9     Enable SYSCLKOUT to CPU-Timer 1
   uint16_t CPUTIMER2ENCLK:1;   // 10    Enable SYSCLKOUT to CPU-Timer 2
   uint16_t DMAENCLK:1;         // 11    Enable the DMA clock
   uint16_t XINTFENCLK:1;       // 12    Enable SYSCLKOUT to XINTF
   uint16_t GPIOINENCLK:1;      //     Enable GPIO input clock
   uint16_t rsvd2:2;            // 15:14 reserved
};

union PCLKCR3_REG {
   uint16_t              all;
   struct PCLKCR3_BITS bit;
};



// PLL control register bit definitions:
struct PLLCR_BITS {      // bits  description
   uint16_t DIV:4;         // 3:0   Set clock ratio for the PLL
   uint16_t rsvd1:12;      // 15:4  reserved
};

union PLLCR_REG {
   uint16_t             all;
   struct PLLCR_BITS  bit;
};

// Low Power Mode 0 control register bit definitions:
struct LPMCR0_BITS {     // bits  description
   uint16_t LPM:2;         // 1:0   Set the low power mode
   uint16_t QUALSTDBY:6;   // 7:2   Qualification
   uint16_t rsvd1:7;       // 14:8  reserved
   uint16_t WDINTE:1;      // 15    Enables WD to wake the device from STANDBY
};

union LPMCR0_REG {
   uint16_t              all;
   struct LPMCR0_BITS  bit;
};

// Dual-mapping configuration register bit definitions:
struct MAPCNF_BITS {     // bits  description
    uint16_t MAPEPWM:1;    // 0     EPWM dual-map enable
    uint16_t rsvd1:15;     // 15:1  reserved
};

union MAPCNF_REG {
	uint16_t             all;
	struct MAPCNF_BITS bit;
};

//---------------------------------------------------------------------------
// System Control Register File:
//
typedef struct SYS_CTRL_REGS {
   union   PLLSTS_REG  PLLSTS;    // 1
   union   HISPCP_REG  HISPCP;    // 10: High-speed peripheral clock pre-scaler
   union   LOSPCP_REG  LOSPCP;    // 11: Low-speed peripheral clock pre-scaler
   union   PCLKCR0_REG PCLKCR0;   // 12: Peripheral clock control register
   union   PCLKCR1_REG PCLKCR1;   // 13: Peripheral clock control register
   union   LPMCR0_REG  LPMCR0;    // 14: Low-power mode control register 0
   union   PCLKCR3_REG PCLKCR3;   // 16: Peripheral clock control register
   union   PLLCR_REG   PLLCR;     // 17: PLL control register
   // No bit definitions are defined for SCSR because
   // a read-modify-write instruction can clear the WDOVERRIDE bit
   uint16_t              SCSR;      // 18: System control and status register
   uint16_t              WDCNTR;    // 19: WD counter register
   uint16_t              WDKEY;     // 21: WD reset key register
   // No bit definitions are defined for WDCR because
   // the proper value must be written to the WDCHK field
   // whenever writing to this register.
   uint16_t              WDCR;      // 25: WD timer control register
   union   MAPCNF_REG  MAPCNF;    // 30: Dual-mapping configuration register
}sysctrl_28335_reg_t;

typedef struct syscrtl_28335_device{
	conf_object_t* obj;
	sysctrl_28335_reg_t* regs;
	general_signal_intf* signal_iface;
	conf_object_t* signal; 
    time_handle_t *handle;
	int old_key;
	int divsel;
	int oscclk;
	int sysclk;
	double wdclk;
	int wd_scale;
	int sched_id;
}sysctrl_28335_device;

#define WDCHK ((dev->regs->WDCR >> 3) & 0x7)
#define WDENINT ((dev->regs->SCSR >> 1) & 0x1)
#define WDDIS ((dev->regs->WDCR >> 6) & 0x1)
static char* regs_name[] = {
	"PLLSTS",
	"HISPCP",
	"LOSPCP",
	"PCLKCR0",
	"PCLKCR1",
	"LPMCR0",
	"PCLKCR3",
	"PLLCR",
	"SCSR",
	"WDCNTR",
	"WDKEY",
	"WDCR",
	"MAPCNF",
	NULL
};
static uint32_t regs_offset[] = {
	0x0000,
	0x0009,
	0x000a,
	0x000b,
	0x000c,
	0x000d,
	0x000f,
	0x0010,
	0x0011,
	0x0012,
	0x0014,
	0x0018,
	0x001d,
};

#ifdef __cplusplus
}
#endif 

#endif
