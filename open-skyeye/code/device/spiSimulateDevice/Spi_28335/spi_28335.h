/* Copyright (C)
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
* 
*/
/**
* @file syscrtl_28335.h
* @brief The definition of system controller 
* @author 
* @version 78.77
*/

/* Autogenerated by SkyEye script */
#ifndef __SPI_28335_H__
#define __SPI_28335_H__

#include <skyeye_system.h>
#ifdef __cplusplus
extern "C" {
#endif

//---------------------------------------------------------------------------
// SPI Individual Register Bit Definitions:
//
// SPI FIFO Transmit register bit    definitions:
struct  SPIFFTX_BITS {       // bit    description
   uint16_t TXFFIL:5;          // 4:0    Interrupt level
   uint16_t TXFFIENA:1;        // 5      Interrupt enable
   uint16_t TXFFINTCLR:1;      // 6      Clear INT flag
   uint16_t TXFFINT:1;         // 7      INT flag
   uint16_t TXFFST:5;          // 12:8   FIFO status
   uint16_t TXFIFO:1;          // 13     FIFO reset
   uint16_t SPIFFENA:1;        // 14     Enhancement enable
   uint16_t SPIRST:1;          // 15     Reset SPI
};

union SPIFFTX_REG {
   uint16_t               all;
   struct SPIFFTX_BITS  bit;
};

//--------------------------------------------
// SPI FIFO recieve register bit definitions:
//
//
struct  SPIFFRX_BITS {       // bits   description
   uint16_t RXFFIL:5;          // 4:0    Interrupt level
   uint16_t RXFFIENA:1;        // 5      Interrupt enable
   uint16_t RXFFINTCLR:1;      // 6      Clear INT flag
   uint16_t RXFFINT:1;         // 7      INT flag
   uint16_t RXFFST:5;          // 12:8   FIFO status
   uint16_t RXFIFORESET:1;     // 13     FIFO reset
   uint16_t RXFFOVFCLR:1;      // 14     Clear overflow
   uint16_t RXFFOVF:1;         // 15     FIFO overflow

};

union SPIFFRX_REG {
   uint16_t               all;
   struct SPIFFRX_BITS  bit;
};

//--------------------------------------------
// SPI FIFO control register bit definitions:
//
//
struct  SPIFFCT_BITS {       // bits   description
   uint16_t TXDLY:8;           // 7:0    FIFO transmit delay
   uint16_t rsvd:8;            // 15:8   reserved
};

union SPIFFCT_REG {
   uint16_t               all;
   struct SPIFFCT_BITS  bit;
};

//---------------------------------------------
// SPI configuration register bit definitions:
//
//
struct  SPICCR_BITS {        // bits   description
   uint16_t SPICHAR:4;         // 3:0    Character length control
   uint16_t SPILBK:1;          // 4      Loop-back enable/disable
   uint16_t rsvd1:1;           // 5      reserved
   uint16_t CLKPOLARITY:1;     // 6      Clock polarity
   uint16_t SPISWRESET:1;      // 7      SPI SW Reset
   uint16_t rsvd2:8;           // 15:8   reserved
};

union SPICCR_REG {
   uint16_t              all;
   struct SPICCR_BITS  bit;
};

//-------------------------------------------------
// SPI operation control register bit definitions:
//
//
struct  SPICTL_BITS {        // bits   description
   uint16_t SPIINTENA:1;       // 0      Interrupt enable
   uint16_t TALK:1;            // 1      Master/Slave transmit enable
   uint16_t MASTER_SLAVE:1;    // 2      Network control mode
   uint16_t CLK_PHASE:1;       // 3      Clock phase select
   uint16_t OVERRUNINTENA:1;   // 4      Overrun interrupt enable
   uint16_t rsvd:11;           // 15:5   reserved
};

union SPICTL_REG {
   uint16_t              all;
   struct SPICTL_BITS  bit;
};

//--------------------------------------
// SPI status register bit definitions:
//
//
struct  SPISTS_BITS {        // bits   description
   uint16_t rsvd1:5;           // 4:0    reserved
   uint16_t BUFFULL_FLAG:1;    // 5      SPI transmit buffer full flag
   uint16_t INT_FLAG:1;        // 6      SPI interrupt flag
   uint16_t OVERRUN_FLAG:1;    // 7      SPI reciever overrun flag
   uint16_t rsvd2:8;           // 15:8   reserved
};

union SPISTS_REG {
   uint16_t              all;
   struct SPISTS_BITS  bit;
};

//------------------------------------------------
// SPI priority control register bit definitions:
//
//
struct  SPIPRI_BITS {        // bits   description
   uint16_t rsvd1:4;           // 3:0    reserved
   uint16_t FREE:1;            // 4      Free emulation mode control
   uint16_t SOFT:1;            // 5      Soft emulation mode control
   uint16_t rsvd2:1;           // 6      reserved
   uint16_t rsvd3:9;           // 15:7   reserved
};

union SPIPRI_REG {
   uint16_t              all;
   struct SPIPRI_BITS  bit;
};

//---------------------------------------------------------------------------
// SPI Register File:
// address : 0x7040
typedef struct  SPI_REGS {
   union SPICCR_REG     spiccr;      // Configuration register
   union SPICTL_REG     spictl;      // Operation control register
   union SPISTS_REG     spists;      // Status register
   uint16_t             spibrr;      // Baud Rate
   uint16_t             spirxemu;    // Emulation buffer
   uint16_t             spirxbuf;    // Serial input buffer
   uint16_t             spitxbuf;    // Serial output buffer
   uint16_t             spidat;      // Serial data
   union SPIFFTX_REG    spifftx;     // FIFO transmit register
   union SPIFFRX_REG    spiffrx;     // FIFO recieve register
   union SPIFFCT_REG    spiffct;     // FIFO control register
   union SPIPRI_REG     spipri;      // FIFO Priority control
}spi_28335_reg_t;

typedef struct syscrtl_28335_device{
	conf_object_t* obj;
	spi_28335_reg_t* regs;
	general_signal_intf* signal_iface;
	conf_object_t* signal;
	uint16_t tx_fifo[16];
	uint16_t rx_fifo[16];
	int Tx_int_number;
	int Rx_int_number;
	int sched_id;
	char **regs_name;
    time_handle_t *handle;
}spi_28335_device;

#define SPICCR  	0x0
#define SPICTL  	0x1
#define SPISTS  	0x2
#define SPIBRR  	0x4
#define SPIRXEMU  	0x6
#define SPIRXBUF  	0x7
#define SPITXBUF  	0x8
#define SPIDAT  	0x9
#define SPIFFTX  	0xa
#define SPIFFRX  	0xb
#define SPIFFCT  	0xc
#define SPIPRI  	0xf

#define CHAR_LENGTH  (dev->regs->spiccr.bit.SPICHAR + 1)
#define TX_CNT (dev->regs->spifftx.bit.TXFFST)
#define RX_CNT (dev->regs->spiffrx.bit.RXFFST)

static char* regs_name[] = {
	"spiccr",
	"spictl",
	"spists",
	"spibrr",
	"spirxemu",
	"spirxbuf",
	"spitxbuf",
	"spidat",
	"spifftx",
	"spiffrx",
	"spiffct",
	"spipri",
	NULL
};
static uint32_t regs_offset[] = {
	0x000,
	0x001,
	0x002,
	0x004,
	0x006,
	0x007,
	0x008,
	0x009,
	0x00a,
	0x00b,
	0x00c,
	0x00f,
};

#define CPU_FREQ 150
#ifdef __cplusplus
}
#endif 

#endif
