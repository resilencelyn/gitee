<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <groupId>com.iohao.game</groupId>
    <artifactId>iogame</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>iogame</name>
    <description>the little game sum</description>

    <modules>
        <!-- 网络游戏框架 - 通用部份  -->
        <module>common/common-kit</module>
        <module>common/common-core</module>
        <module>common/common-message</module>
        <!-- 网络游戏框架：服务器、客户端 部份-->
        <module>common/common-net</module>
        <module>common/common-net-server</module>
        <module>common/common-net-client</module>
        <!-- 网络游戏框架 : 对外的服务器 （面向真实用户） -->
        <module>common/common-net-external</module>

        <!-- 小部件 : 任务延时器 -->
        <module>widget/light-timer-task</module>
        <!-- 小部件 : 领域事件 -->
        <module>widget/light-domain-event</module>
        <!-- 小部件 : 多环境切换 -->
        <module>widget/light-profile</module>
        <!-- 小部件 : jprotobuf 增强 -->
        <module>widget/light-jprotobuf</module>

        <module>widget/light-all</module>

        <!-- 示例  -->
        <module>example/example-parent</module>
        <module>example/example-run-one</module>
        <module>example/example-for-spring</module>
        <module>example/example-interaction</module>

        <!-- 实践案例 - 通用部份  -->
        <module>game-collect/game-common-proto</module>
        <module>game-collect/game-common</module>
        <module>game-collect/game-common-logic</module>

        <!-- 网关服 -->
        <module>game-collect/game-gateway</module>
        <!-- 对外服 -->
        <module>game-collect/game-external</module>

        <!-- 逻辑服 - 大厅 -->
        <module>game-collect/game-logic-hall</module>
        <!-- 逻辑服 - 坦克 -->
        <module>game-collect/game-logic-tank</module>

        <!-- 启动 对外服、网关、逻辑服 -->
        <module>game-collect/game-one</module>

        <!-- 模拟客户端 -->
        <module>game-collect/game-test</module>
        <!-- java 坦克游戏 fxgl -->
        <module>game-collect/fxgl-tank</module>


    </modules>

    <!--统一管理版本 的一个父 pom-->
    <properties>
        <!-- 项目版本 -->
        <project-revision.version>0.0.1-SNAPSHOT</project-revision.version>
        <!-- jdk 版本 -->
        <java.version>17</java.version>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <encoding>UTF-8</encoding>

        <!-- 网络库 : https://mvnrepository.com/artifact/io.netty/netty-all -->
        <netty.version>4.1.75.Final</netty.version>
        <!--  bolt https://mvnrepository.com/artifact/com.alipay.sofa/bolt  -->
        <bolt.version>1.6.4</bolt.version>
        <!-- pb 数据描述语言 : https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java -->
        <protobuf-java.version>3.19.4</protobuf-java.version>
        <!-- hessian 格式化 https://mvnrepository.com/artifact/com.caucho/hessian -->
        <hessian.version>4.0.65</hessian.version>
        <!--  Jansi 控制台输出彩色文字 https://www.oschina.net/p/jansi https://mvnrepository.com/artifact/org.fusesource.jansi/jansi  -->
        <jansi.version>2.4.0</jansi.version>
        <!-- Java文档解析器 https://mvnrepository.com/artifact/com.thoughtworks.qdox/qdox -->
        <qdox.version>2.0.1</qdox.version>

        <!-- Hutool是一个Java工具包 see https://www.hutool.cn/ https://mvnrepository.com/artifact/cn.hutool/hutool-all -->
        <hutool.version>5.7.22</hutool.version>
        <!-- JCTools 是一款对jdk并发数据结构进行增强的并发工具 see http://jctools.github.io/JCTools/ https://mvnrepository.com/artifact/org.jctools/jctools-core -->
        <jctools-core.version>3.3.0</jctools-core.version>
        <!-- 新一代 Java 模板引擎 see https://www.kancloud.cn/xiandafu/beetl3_guide/1992542 https://mvnrepository.com/artifact/com.ibeetl/beetl -->
        <beetl.version>3.10.0.RELEASE</beetl.version>
        <!-- lombok 消除冗长的 Java 代码 https://www.oschina.net/p/lombok https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <lombok.version>1.18.22</lombok.version>

        <!-- redis internal : https://www.oschina.net/p/redisson https://mvnrepository.com/artifact/org.redisson/redisson -->
        <redisson.version>3.16.8</redisson.version>
        <!-- json 解析器 : https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <fastjson.version>1.2.79</fastjson.version>
        <!-- 对象池 :  https://mvnrepository.com/artifact/org.apache.commons/commons-pool2 -->
        <commons-pool.version>2.11.1</commons-pool.version>
        <!--  JSR-107 高性能缓存库 https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine -->
        <caffeine.version>3.0.5</caffeine.version>
        <!--  reflectasm 高性能的反射处理 https://www.oschina.net/p/reflectasm https://mvnrepository.com/artifact/com.esotericsoftware/reflectasm  -->
        <reflectasm.version>1.11.9</reflectasm.version>
        <!-- jprotobuf是针对Java程序开发一套简易类库，目的是简化java语言对protobuf类库的使用 https://github.com/jhunters/jprotobuf/ https://mvnrepository.com/artifact/com.baidu/jprotobuf -->
        <jprotobuf.version>2.4.14</jprotobuf.version>
        <!-- ==============轻量小部件============== -->
        <!--  cache2k https://mvnrepository.com/artifact/org.cache2k -->
        <!--        <cache2k.version>2.4.1.Final</cache2k.version>-->
        <cache2k.version>1.2.4.Final</cache2k.version>
        <!--  disruptor https://mvnrepository.com/artifact/com.lmax/disruptor -->
        <disruptor.version>3.4.4</disruptor.version>

        <!-- JSR-303、JSR 349 bean 验证框架 https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
        <hibernate-validator.version>7.0.2.Final</hibernate-validator.version>
        <!-- JSR-303、JSR 349 https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api -->
        <jakarta.validation-api.version>3.0.1</jakarta.validation-api.version>
        <!-- JSR-303、JSR 349 https://mvnrepository.com/artifact/org.glassfish/jakarta.el -->
        <jakarta.el.version>4.0.2</jakarta.el.version>

        <!-- Hazelcast提供弹性可扩展的分布式内存计算 https://mvnrepository.com/artifact/com.hazelcast/hazelcast -->
        <hazelcast.version>5.0.2</hazelcast.version>

        <!-- Java 实体映射工具 https://mvnrepository.com/artifact/org.mapstruct/mapstruct https://mapstruct.org/documentation/reference-guide/ -->
        <org.mapstruct.version>1.4.2.Final</org.mapstruct.version>

        <!-- temp spring boot https://mvnrepository.com/artifact/org.springframework/spring-core -->
        <spring.version>5.3.17</spring.version>
        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter -->
        <springboot.version>2.6.4</springboot.version>
        <!--  junit https://mvnrepository.com/artifact/junit/junit  -->
        <junit.version>4.13.2</junit.version>
        <!-- 模拟客户端 https://mvnrepository.com/artifact/org.java-websocket/Java-WebSocket -->
        <java-websocket.version>1.5.2</java-websocket.version>

    </properties>


    <dependencies>
        <!-- lombok 简化 java 代码 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.32</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.8</version>
            <scope>compile</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.baidu</groupId>
            <artifactId>jprotobuf</artifactId>
            <version>${jprotobuf.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-clean-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>

            <!--
            编译插件
            mvn compile
            To compile your test sources, you'll do:
            mvn test-compile
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <compilerVersion>${java.version}</compilerVersion>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <!-- maven 3.6.2及之后加上编译参数，可以让我们在运行期获取方法参数名称。 -->
                    <parameters>true</parameters>
                    <skip>true</skip>
                    <!-- JDK9+ with module-info.java -->
                    <annotationProcessorPaths>
                        <!-- 实体映射工具 -->
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>

                        <!-- lombok 消除冗长的 Java 代码 -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <!-- additional annotation processor required as of Lombok 1.18.16 -->
                        <!-- mapStruct 支持 lombok -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- 打包时跳过单元测试 https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <!-- 打包源码 https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-source-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <configuration>
                    <attach>true</attach>
                </configuration>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
